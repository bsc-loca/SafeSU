
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite -- Symbiotic EDA Edition [20190521A ] |
 |                                                                            |
 |  Copyright (C) 2012 - 2019 Symbiotic GmbH                                  |
 |                                                                            |
 |  Licensed to: Symbiotic EDA Eval License Program                           |
 |  Licensee contact: office@symbioticeda.com                                 |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+472 (git sha1 c907899, clang 3.8.0-2ubuntu4 -fPIC -Os)

[license] Signature verified.
[license] License cache is hot.

-- Running command `read -define D16' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.

-- Executing script file `yosys_45.ys' --

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'instances.sv'
VERIFIC-WARNING [VERI-2365] instances.sv:95: generate block is allowed only inside loop and conditional generate in SystemVerilog mode
VERIFIC-WARNING [VERI-2365] instances.sv:126: generate block is allowed only inside loop and conditional generate in SystemVerilog mode

3. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../submodules/seu_ip/reg_sbf.sv'

4. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../submodules/seu_ip/way3_voter.sv'

5. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
Adding Verilog module 'instances' to elaboration queue.
Running hier_tree::Elaborate().
VERIFIC-INFO [VERI-1018] instances.sv:20: compiling module 'instances'
VERIFIC-INFO [VERI-1018] ../../submodules/seu_ip/way3_voter.sv:24: compiling module 'way3_voter(IN_WIDTH=16)'
VERIFIC-INFO [VERI-1018] ../../submodules/seu_ip/reg_sbf.sv:26: compiling module 'reg_sbf(IN_WIDTH=16)'
Importing module instances.
Importing module way3_voter(IN_WIDTH=16).
Importing module reg_sbf(IN_WIDTH=16).

6. Executing PREP pass.

6.1. Executing HIERARCHY pass (managing design hierarchy).

6.1.1. Analyzing design hierarchy..
Top module:  \instances
Used module:     \reg_sbf(IN_WIDTH=16)
Used module:     \way3_voter(IN_WIDTH=16)

6.1.2. Analyzing design hierarchy..
Top module:  \instances
Used module:     \reg_sbf(IN_WIDTH=16)
Used module:     \way3_voter(IN_WIDTH=16)
Removed 0 unused modules.

6.2. Executing PROC pass (convert processes to netlists).

6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

6.2.3. Executing PROC_INIT pass (extract init attributes).

6.2.4. Executing PROC_ARST pass (detect async resets in processes).

6.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

6.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

6.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

6.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module reg_sbf(IN_WIDTH=16).
<suppressed ~1 debug messages>
Optimizing module way3_voter(IN_WIDTH=16).
Optimizing module instances.
<suppressed ~2 debug messages>

6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=16)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=16)..
Finding unused cells or wires in module \instances..
Removed 11 unused cells and 111 unused wires.
<suppressed ~20 debug messages>

6.5. Executing CHECK pass (checking for obvious problems).
checking module instances..
checking module reg_sbf(IN_WIDTH=16)..
checking module way3_voter(IN_WIDTH=16)..
found and reported 0 problems.

6.6. Executing OPT pass (performing simple optimizations).

6.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=16).
Optimizing module way3_voter(IN_WIDTH=16).

6.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=16)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=16)'.
Removed a total of 0 cells.

6.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=16)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=16)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

6.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=16).
  Optimizing cells in module \way3_voter(IN_WIDTH=16).
Performed a total of 0 changes.

6.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=16)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=16)'.
Removed a total of 0 cells.

6.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=16)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=16)..

6.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=16).
Optimizing module way3_voter(IN_WIDTH=16).

6.6.9. Finished OPT passes. (There is nothing left to do.)

6.7. Executing WREDUCE pass (reducing word size of cells).

6.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

6.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=16)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=16)..

6.10. Executing MEMORY_COLLECT pass (generating $mem cells).

6.11. Executing OPT pass (performing simple optimizations).

6.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=16).
Optimizing module way3_voter(IN_WIDTH=16).

6.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=16)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=16)'.
Removed a total of 0 cells.

6.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

6.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=16)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=16)..

6.11.5. Finished fast OPT passes.

6.12. Printing statistics.

=== instances ===

   Number of wires:                 17
   Number of wire bits:            197
   Number of public wires:          17
   Number of public wire bits:     197
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== reg_sbf(IN_WIDTH=16) ===

   Number of wires:                 10
   Number of wire bits:             40
   Number of public wires:           8
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $dff                            1
     $mux                            2
     $reduce_xor                     2
     $xor                            1

=== way3_voter(IN_WIDTH=16) ===

   Number of wires:                 14
   Number of wire bits:            104
   Number of public wires:           6
   Number of public wire bits:      66
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $eq                             3
     $mux                            6
     $ne                             1
     $not                            1

=== design hierarchy ===

   instances                         1

   Number of wires:                 17
   Number of wire bits:            197
   Number of public wires:          17
   Number of public wire bits:     197
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

6.13. Executing CHECK pass (checking for obvious problems).
checking module instances..
checking module reg_sbf(IN_WIDTH=16)..
checking module way3_voter(IN_WIDTH=16)..
found and reported 0 problems.

7. Executing PROC pass (convert processes to netlists).

7.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

7.3. Executing PROC_INIT pass (extract init attributes).

7.4. Executing PROC_ARST pass (detect async resets in processes).

7.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

7.6. Executing PROC_DLATCH pass (convert process syncs to latches).

7.7. Executing PROC_DFF pass (convert process syncs to FFs).

7.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=16).
Optimizing module way3_voter(IN_WIDTH=16).

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=16)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=16)'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=16)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=16)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=16).
  Optimizing cells in module \way3_voter(IN_WIDTH=16).
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=16)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=16)'.
Removed a total of 0 cells.

8.6. Executing OPT_RMDFF pass (remove dff with constant values).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=16)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=16)..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=16).
Optimizing module way3_voter(IN_WIDTH=16).

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing FSM pass (extract and optimize FSM).

9.1. Executing FSM_DETECT pass (finding FSMs in design).

9.2. Executing FSM_EXTRACT pass (extracting FSM from design).

9.3. Executing FSM_OPT pass (simple optimizations of FSMs).

9.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=16)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=16)..

9.5. Executing FSM_OPT pass (simple optimizations of FSMs).

9.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

9.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

9.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=16).
Optimizing module way3_voter(IN_WIDTH=16).

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=16)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=16)'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=16)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=16)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=16).
  Optimizing cells in module \way3_voter(IN_WIDTH=16).
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=16)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=16)'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=16)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=16)..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=16).
Optimizing module way3_voter(IN_WIDTH=16).

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing MEMORY pass.

11.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

11.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=16)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=16)..

11.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=16)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=16)..

11.5. Executing MEMORY_COLLECT pass (generating $mem cells).

11.6. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=16).
Optimizing module way3_voter(IN_WIDTH=16).

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=16)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=16)'.
Removed a total of 0 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=16)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=16)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=16).
  Optimizing cells in module \way3_voter(IN_WIDTH=16).
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=16)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=16)'.
Removed a total of 0 cells.

12.6. Executing OPT_RMDFF pass (remove dff with constant values).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=16)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=16)..

12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=16).
Optimizing module way3_voter(IN_WIDTH=16).

12.9. Finished OPT passes. (There is nothing left to do.)

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_xor.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~17 debug messages>

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=16).
<suppressed ~1 debug messages>
Optimizing module way3_voter(IN_WIDTH=16).
<suppressed ~52 debug messages>

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=16)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=16)'.
<suppressed ~93 debug messages>
Removed a total of 31 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=16)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=16)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=16).
  Optimizing cells in module \way3_voter(IN_WIDTH=16).
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=16)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=16)'.
Removed a total of 0 cells.

14.6. Executing OPT_RMDFF pass (remove dff with constant values).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=16)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=16)..
Removed 3 unused cells and 16 unused wires.
<suppressed ~5 debug messages>

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=16).
Optimizing module way3_voter(IN_WIDTH=16).

14.9. Rerunning OPT passes. (Maybe there is more to do..)

14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=16)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=16)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=16).
  Optimizing cells in module \way3_voter(IN_WIDTH=16).
Performed a total of 0 changes.

14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=16)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=16)'.
Removed a total of 0 cells.

14.13. Executing OPT_RMDFF pass (remove dff with constant values).

14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=16)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=16)..

14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=16).
Optimizing module way3_voter(IN_WIDTH=16).

14.16. Finished OPT passes. (There is nothing left to do.)

15. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=7.98) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=7.98) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=10.32) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\instances':
Mapping DFF cells in module `\reg_sbf(IN_WIDTH=16)':
  mapped 1 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\way3_voter(IN_WIDTH=16)':

16. Executing ABC pass (technology mapping using ABC).

16.1. Extracting gate netlist of module `\instances' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

16.2. Extracting gate netlist of module `\reg_sbf(IN_WIDTH=16)' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 67 wires to a netlist network with 34 inputs and 2 outputs.

16.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/experiments/FT-resource-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     32 (  0.0 %)   Cap =  4.9 ff (  0.0 %)   Area =      146.42 (100.0 %)   Delay =   278.95 ps  ( 31.2 %)               
ABC: Path  0 --      18 : 0    1 pi      A =   0.00  Df =  10.3   -2.0 ps  S =  20.8 ps  Cin =  0.0 ff  Cout =   5.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      59 : 2    1 XNOR2X1 A =   4.69  Df =  71.0  -23.5 ps  S =  55.1 ps  Cin =  5.1 ff  Cout =   5.6 ff  Cmax = 228.3 ff  G =  104  
ABC: Path  2 --      60 : 2    1 XNOR2X1 A =   4.69  Df = 133.4  -21.2 ps  S =  51.7 ps  Cin =  5.1 ff  Cout =   5.0 ff  Cmax = 228.3 ff  G =   95  
ABC: Path  3 --      62 : 2    1 XNOR2X1 A =   4.69  Df = 184.1  -12.2 ps  S =  54.5 ps  Cin =  5.1 ff  Cout =   5.6 ff  Cmax = 228.3 ff  G =  104  
ABC: Path  4 --      63 : 2    1 XNOR2X1 A =   4.69  Df = 246.5  -21.2 ps  S =  51.7 ps  Cin =  5.1 ff  Cout =   5.0 ff  Cmax = 228.3 ff  G =   95  
ABC: Path  5 --      68 : 2    1 XNOR2X1 A =   4.69  Df = 279.0   -2.8 ps  S =  27.7 ps  Cin =  5.1 ff  Cout =   0.0 ff  Cmax = 228.3 ff  G =    0  
ABC: Start-point = pi17 (\rego_i [3]).  End-point = po1 (\error_o).
ABC: + write_blif <abc-temp-dir>/output.blif 

16.2.2. Re-integrating ABC results.
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:       20
ABC RESULTS:            XOR2X1 cells:       10
ABC RESULTS:        internal signals:       31
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:        2
Removing temp directory.

16.3. Extracting gate netlist of module `\way3_voter(IN_WIDTH=16)' to `<abc-temp-dir>/input.blif'..
Extracted 144 gates and 194 wires to a netlist network with 48 inputs and 18 outputs.

16.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/experiments/FT-resource-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    129 ( 27.1 %)   Cap =  5.1 ff (  0.3 %)   Area =      405.48 ( 98.4 %)   Delay =   354.54 ps  ( 17.1 %)               
ABC: Path  0 --      35 : 0    2 pi      A =   0.00  Df =  26.7   -6.0 ps  S =  36.0 ps  Cin =  0.0 ff  Cout =  11.3 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      86 : 2    1 XOR2X1  A =   4.69  Df =  77.2  -17.5 ps  S =  43.3 ps  Cin =  5.3 ff  Cout =   2.4 ff  Cmax = 223.3 ff  G =   44  
ABC: Path  2 --      87 : 3    1 AOI21X1 A =   2.82  Df =  99.4  -14.2 ps  S =  29.9 ps  Cin =  2.6 ff  Cout =   2.8 ff  Cmax =   0.0 ff  G =  105  
ABC: Path  3 --      89 : 3    1 NAND3X1 A =   2.35  Df = 136.7  -32.1 ps  S =  40.8 ps  Cin =  2.7 ff  Cout =   3.1 ff  Cmax =   0.0 ff  G =  115  
ABC: Path  4 --      95 : 3    1 NOR3X1  A =   2.82  Df = 169.1  -26.1 ps  S =  48.4 ps  Cin =  3.1 ff  Cout =   1.9 ff  Cmax =  96.9 ff  G =   59  
ABC: Path  5 --      96 : 2    1 AND2X2  A =   2.82  Df = 212.2   -5.6 ps  S =  14.6 ps  Cin =  1.8 ff  Cout =   4.0 ff  Cmax = 505.1 ff  G =  216  
ABC: Path  6 --      97 : 1    8 BUFX4   A =   2.82  Df = 263.6  -13.0 ps  S =  41.8 ps  Cin =  3.9 ff  Cout =  31.7 ff  Cmax = 999.3 ff  G =  787  
ABC: Path  7 --      98 : 1   10 BUFX4   A =   2.82  Df = 319.9  -19.6 ps  S =  54.1 ps  Cin =  3.9 ff  Cout =  41.2 ff  Cmax = 999.3 ff  G = 1017  
ABC: Path  8 --      99 : 3    1 MUX2X1  A =   3.75  Df = 354.5   -4.8 ps  S =  31.0 ps  Cin =  3.1 ff  Cout =   0.0 ff  Cmax =  75.1 ff  G =    0  
ABC: Start-point = pi34 (\in2 [2]).  End-point = po0 (\out [0]).
ABC: + write_blif <abc-temp-dir>/output.blif 

16.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:             BUFX4 cells:        2
ABC RESULTS:             INVX1 cells:       33
ABC RESULTS:            MUX2X1 cells:       16
ABC RESULTS:           NAND2X1 cells:        7
ABC RESULTS:           NAND3X1 cells:        9
ABC RESULTS:            NOR3X1 cells:        9
ABC RESULTS:           OAI21X1 cells:        2
ABC RESULTS:           XNOR2X1 cells:       34
ABC RESULTS:            XOR2X1 cells:       11
ABC RESULTS:        internal signals:      128
ABC RESULTS:           input signals:       48
ABC RESULTS:          output signals:       18
Removing temp directory.

17. Printing statistics.

=== instances ===

   Number of wires:                 17
   Number of wire bits:            197
   Number of public wires:          17
   Number of public wire bits:     197
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== reg_sbf(IN_WIDTH=16) ===

   Number of wires:                 81
   Number of wire bits:            133
   Number of public wires:           8
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 33
     AOI21X1                         1
     DFFPOSX1                        1
     OAI21X1                         1
     XNOR2X1                        20
     XOR2X1                         10

   Chip area for module '\reg_sbf(IN_WIDTH=16)': 154.399700

=== way3_voter(IN_WIDTH=16) ===

   Number of wires:                201
   Number of wire bits:            369
   Number of public wires:           6
   Number of public wire bits:      66
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                129
     AND2X2                          2
     AOI21X1                         4
     BUFX4                           2
     INVX1                          33
     MUX2X1                         16
     NAND2X1                         7
     NAND3X1                         9
     NOR3X1                          9
     OAI21X1                         2
     XNOR2X1                        34
     XOR2X1                         11

   Chip area for module '\way3_voter(IN_WIDTH=16)': 405.475200

=== design hierarchy ===

   instances                         1

   Number of wires:                 17
   Number of wire bits:            197
   Number of public wires:          17
   Number of public wire bits:     197
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

Removed 0 unused cells and 126 unused wires.

18. Executing Verilog backend.
Dumping module `\instances'.
Dumping module `\reg_sbf(IN_WIDTH=16)'.
Dumping module `\way3_voter(IN_WIDTH=16)'.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: a6ae4fd3e9
CPU: user 0.14s system 0.01s, MEM: 139.85 MB total, 24.33 MB resident
Yosys 0.8+472 (git sha1 c907899, clang 3.8.0-2ubuntu4 -fPIC -Os)
Time spent: 15% 13x opt_expr (0 sec), 14% 12x opt_merge (0 sec), ...
