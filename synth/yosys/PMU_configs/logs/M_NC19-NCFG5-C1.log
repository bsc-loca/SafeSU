
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite -- Symbiotic EDA Edition [20190521A ] |
 |                                                                            |
 |  Copyright (C) 2012 - 2019 Symbiotic GmbH                                  |
 |                                                                            |
 |  Licensed to: Symbiotic EDA Eval License Program                           |
 |  Licensee contact: office@symbioticeda.com                                 |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+472 (git sha1 c907899, clang 3.8.0-2ubuntu4 -fPIC -Os)

[license] Signature verified.
[license] License cache is hot.

-- Running command `read -define YOSYS_8' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.

-- Executing script file `yosys_45.ys' --

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../hdl/AXI_PMU.sv'

3. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv'

4. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../submodules/MCCU/hdl/MCCU.sv'

5. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../submodules/RDC/hdl/RDC.sv'

6. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
Adding Verilog module 'AXI_PMU' to elaboration queue.
Running hier_tree::Elaborate().
VERIFIC-WARNING [VERI-1927] ../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:843: port 'watermark_o' remains unconnected for this instance
VERIFIC-INFO [VERI-1018] ../../hdl/AXI_PMU.sv:11: compiling module 'AXI_PMU'
VERIFIC-WARNING [VERI-1216] ../../hdl/AXI_PMU.sv:172: index 1 is out of range [0:0] for 'MCCU_int_o'
VERIFIC-INFO [VERI-1018] ../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:24: compiling module 'AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'
VERIFIC-INFO [VERI-1018] ../../submodules/MCCU/hdl/MCCU.sv:21: compiling module 'MCCU(N_CORES=1)'
VERIFIC-INFO [VERI-1018] ../../submodules/RDC/hdl/RDC.sv:18: compiling module 'RDC(N_CORES=1,CORE_EVENTS=4)'
Importing module AXI_PMU.
Importing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Importing module MCCU(N_CORES=1).
Importing module RDC(N_CORES=1,CORE_EVENTS=4).

7. Executing PREP pass.

7.1. Executing HIERARCHY pass (managing design hierarchy).

7.1.1. Analyzing design hierarchy..
Top module:  \AXI_PMU
Used module:     \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)
Used module:         \RDC(N_CORES=1,CORE_EVENTS=4)
Used module:         \MCCU(N_CORES=1)

7.1.2. Analyzing design hierarchy..
Top module:  \AXI_PMU
Used module:     \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)
Used module:         \RDC(N_CORES=1,CORE_EVENTS=4)
Used module:         \MCCU(N_CORES=1)
Removed 0 unused modules.

7.2. Executing PROC pass (convert processes to netlists).

7.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

7.2.3. Executing PROC_INIT pass (extract init attributes).

7.2.4. Executing PROC_ARST pass (detect async resets in processes).

7.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

7.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

7.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

7.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).
Optimizing module MCCU(N_CORES=1).
<suppressed ~4 debug messages>
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
<suppressed ~24 debug messages>
Optimizing module AXI_PMU.

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \AXI_PMU..
Removed 7 unused cells and 285 unused wires.
<suppressed ~43 debug messages>

7.5. Executing CHECK pass (checking for obvious problems).
checking module AXI_PMU..
checking module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
checking module MCCU(N_CORES=1)..
checking module RDC(N_CORES=1,CORE_EVENTS=4)..
found and reported 0 problems.

7.6. Executing OPT pass (performing simple optimizations).

7.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Optimizing module MCCU(N_CORES=1).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).

7.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Finding identical cells in module `\MCCU(N_CORES=1)'.
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
Removed a total of 0 cells.

7.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AXI_PMU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MCCU(N_CORES=1)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RDC(N_CORES=1,CORE_EVENTS=4)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~61 debug messages>

7.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AXI_PMU.
  Optimizing cells in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
  Optimizing cells in module \MCCU(N_CORES=1).
  Optimizing cells in module \RDC(N_CORES=1,CORE_EVENTS=4).
    New input vector for $reduce_or cell $verific$reduce_or_179$../../submodules/RDC/hdl/RDC.sv:140$1080: { \interruption_vector_int[0] [0] \interruption_vector_int[0] [1] \interruption_vector_int[0] [2] \interruption_vector_int[0] [3] }
  Optimizing cells in module \RDC(N_CORES=1,CORE_EVENTS=4).
Performed a total of 1 changes.

7.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Finding identical cells in module `\MCCU(N_CORES=1)'.
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
Removed a total of 0 cells.

7.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \q_2 = 0 to constant driver in module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Promoting init spec \q = 0 to constant driver in module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Promoting init spec \generated_overflow.j = 0 to constant driver in module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Promoting init spec \generated_overflow.overflow_bit.a = 0 to constant driver in module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Promoting init spec \i = 0 to constant driver in module RDC(N_CORES=1,CORE_EVENTS=4).
Promoted 5 init specs to constant drivers.

7.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AXI_PMU..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..

7.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Optimizing module MCCU(N_CORES=1).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).

7.6.9. Rerunning OPT passes. (Maybe there is more to do..)

7.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AXI_PMU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MCCU(N_CORES=1)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RDC(N_CORES=1,CORE_EVENTS=4)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~61 debug messages>

7.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AXI_PMU.
  Optimizing cells in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
  Optimizing cells in module \MCCU(N_CORES=1).
  Optimizing cells in module \RDC(N_CORES=1,CORE_EVENTS=4).
Performed a total of 0 changes.

7.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Finding identical cells in module `\MCCU(N_CORES=1)'.
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
Removed a total of 0 cells.

7.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

7.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AXI_PMU..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..

7.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Optimizing module MCCU(N_CORES=1).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).

7.6.16. Finished OPT passes. (There is nothing left to do.)

7.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 5) from port A of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$LessThan_1769$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:541$580 ($lt).
Removed top 4 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1774$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$585 ($eq).
Removed top 3 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1776$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$587 ($eq).
Removed top 3 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1778$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$589 ($eq).
Removed top 2 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1780$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$591 ($eq).
Removed top 2 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1782$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$593 ($eq).
Removed top 2 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1784$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$595 ($eq).
Removed top 2 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1786$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$597 ($eq).
Removed top 1 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1788$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$599 ($eq).
Removed top 1 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1790$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$601 ($eq).
Removed top 1 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1792$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$603 ($eq).
Removed top 1 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1794$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$605 ($eq).
Removed top 1 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1796$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$607 ($eq).
Removed top 1 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1798$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$609 ($eq).
Removed top 1 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1800$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$611 ($eq).
Removed top 1 bits (of 5) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$equal_1802$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:543$613 ($eq).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_1841$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$647 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_1973$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$653 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_2105$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$659 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_2237$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$665 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_2369$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$671 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_2501$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$677 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_2633$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$683 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_2765$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$689 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_2897$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$695 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_3029$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$701 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_3161$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$707 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_3293$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$713 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_3425$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$719 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_3557$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$725 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_3689$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$731 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_3821$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$737 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_3953$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$743 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_4085$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$749 ($add).
Removed top 31 bits (of 32) from port B of cell AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).$verific$add_4217$../../hdl/AXI_PMU_interface_v1_0_S00_AXI.sv:586$755 ($add).
Removed top 27 bits (of 32) from wire AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).decode_read.read_address.
Removed top 32 bits (of 64) from port A of cell MCCU(N_CORES=1).$verific$LessThan_21$../../submodules/MCCU/hdl/MCCU.sv:185$956 ($lt).
Removed top 32 bits (of 64) from port A of cell MCCU(N_CORES=1).$verific$LessThan_34$../../submodules/MCCU/hdl/MCCU.sv:198$960 ($lt).
Removed top 1 bits (of 9) from port A of cell MCCU(N_CORES=1).$verific$add_46$../../submodules/MCCU/hdl/MCCU.sv:220$968 ($add).
Removed top 2 bits (of 10) from port A of cell MCCU(N_CORES=1).$verific$add_47$../../submodules/MCCU/hdl/MCCU.sv:220$969 ($add).
Removed top 53 bits (of 64) from FF cell MCCU(N_CORES=1).$verific$ccc_suma_int_reg$../../submodules/MCCU/hdl/MCCU.sv:247$974 ($dff).
Removed top 53 bits (of 64) from port B of cell MCCU(N_CORES=1).$verific$LessThan_21$../../submodules/MCCU/hdl/MCCU.sv:185$956 ($lt).
Removed top 21 bits (of 32) from port B of cell MCCU(N_CORES=1).$verific$sub_22$../../submodules/MCCU/hdl/MCCU.sv:189$957 ($sub).
Removed top 53 bits (of 64) from port B of cell MCCU(N_CORES=1).$verific$LessThan_34$../../submodules/MCCU/hdl/MCCU.sv:198$960 ($lt).
Removed top 21 bits (of 32) from port B of cell MCCU(N_CORES=1).$verific$sub_35$../../submodules/MCCU/hdl/MCCU.sv:202$961 ($sub).
Removed top 53 bits (of 64) from wire MCCU(N_CORES=1).ccc_suma_int[0].
Removed top 2 bits (of 8) from wire MCCU(N_CORES=1).events_weights_int[0][3].
Removed top 7 bits (of 8) from port B of cell RDC(N_CORES=1,CORE_EVENTS=4).$verific$add_7$../../submodules/RDC/hdl/RDC.sv:79$1038 ($add).
Removed top 7 bits (of 8) from port B of cell RDC(N_CORES=1,CORE_EVENTS=4).$verific$add_44$../../submodules/RDC/hdl/RDC.sv:79$1045 ($add).
Removed top 7 bits (of 8) from port B of cell RDC(N_CORES=1,CORE_EVENTS=4).$verific$add_81$../../submodules/RDC/hdl/RDC.sv:79$1052 ($add).
Removed top 7 bits (of 8) from port B of cell RDC(N_CORES=1,CORE_EVENTS=4).$verific$add_118$../../submodules/RDC/hdl/RDC.sv:79$1059 ($add).

7.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AXI_PMU..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

7.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7.11. Executing OPT pass (performing simple optimizations).

7.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Optimizing module MCCU(N_CORES=1).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).

7.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Finding identical cells in module `\MCCU(N_CORES=1)'.
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
Removed a total of 0 cells.

7.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AXI_PMU..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..

7.11.5. Finished fast OPT passes.

7.12. Printing statistics.

=== AXI_PMU ===

   Number of wires:                 45
   Number of wire bits:            142
   Number of public wires:          45
   Number of public wire bits:     142
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)      1

=== AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0) ===

   Number of wires:                372
   Number of wire bits:           6409
   Number of public wires:          92
   Number of public wire bits:    1574
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                326
     $add                           19
     $and                           38
     $dff                           40
     $eq                            38
     $logic_not                      1
     $lt                             2
     $mux                          179
     $not                            6
     $or                             1
     MCCU(N_CORES=1)                 1
     RDC(N_CORES=1,CORE_EVENTS=4)      1

=== MCCU(N_CORES=1) ===

   Number of wires:                 43
   Number of wire bits:            651
   Number of public wires:          18
   Number of public wire bits:     306
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     $add                            3
     $and                            4
     $dff                            2
     $lt                             2
     $mux                           13
     $not                            2
     $sub                            2

=== RDC(N_CORES=1,CORE_EVENTS=4) ===

   Number of wires:                 70
   Number of wire bits:            436
   Number of public wires:          20
   Number of public wire bits:     181
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 65
     $add                            4
     $and                            4
     $dff                           10
     $eq                             4
     $le                             4
     $lt                             4
     $mux                           32
     $or                             2
     $reduce_or                      1

=== design hierarchy ===

   AXI_PMU                           1
     AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)      1
       MCCU(N_CORES=1)               1
       RDC(N_CORES=1,CORE_EVENTS=4)      1

   Number of wires:                530
   Number of wire bits:           7638
   Number of public wires:         175
   Number of public wire bits:    2203
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                417
     $add                           26
     $and                           46
     $dff                           52
     $eq                            42
     $le                             4
     $logic_not                      1
     $lt                             8
     $mux                          224
     $not                            8
     $or                             3
     $reduce_or                      1
     $sub                            2

7.13. Executing CHECK pass (checking for obvious problems).
checking module AXI_PMU..
checking module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
checking module MCCU(N_CORES=1)..
checking module RDC(N_CORES=1,CORE_EVENTS=4)..
found and reported 0 problems.

8. Executing PROC pass (convert processes to netlists).

8.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

8.3. Executing PROC_INIT pass (extract init attributes).

8.4. Executing PROC_ARST pass (detect async resets in processes).

8.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

8.6. Executing PROC_DLATCH pass (convert process syncs to latches).

8.7. Executing PROC_DFF pass (convert process syncs to FFs).

8.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Optimizing module MCCU(N_CORES=1).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Finding identical cells in module `\MCCU(N_CORES=1)'.
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AXI_PMU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MCCU(N_CORES=1)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RDC(N_CORES=1,CORE_EVENTS=4)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~61 debug messages>

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AXI_PMU.
  Optimizing cells in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
  Optimizing cells in module \MCCU(N_CORES=1).
  Optimizing cells in module \RDC(N_CORES=1,CORE_EVENTS=4).
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Finding identical cells in module `\MCCU(N_CORES=1)'.
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AXI_PMU..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Optimizing module MCCU(N_CORES=1).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing FSM pass (extract and optimize FSM).

10.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).axi_bresp as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
Not marking AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).axi_rresp as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AXI_PMU..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..

10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Optimizing module MCCU(N_CORES=1).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Finding identical cells in module `\MCCU(N_CORES=1)'.
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AXI_PMU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MCCU(N_CORES=1)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RDC(N_CORES=1,CORE_EVENTS=4)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~61 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AXI_PMU.
  Optimizing cells in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
  Optimizing cells in module \MCCU(N_CORES=1).
  Optimizing cells in module \RDC(N_CORES=1,CORE_EVENTS=4).
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Finding identical cells in module `\MCCU(N_CORES=1)'.
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
Removed a total of 0 cells.

11.6. Executing OPT_RMDFF pass (remove dff with constant values).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AXI_PMU..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Optimizing module MCCU(N_CORES=1).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).

11.9. Finished OPT passes. (There is nothing left to do.)

12. Executing MEMORY pass.

12.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

12.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AXI_PMU..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..

12.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AXI_PMU..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..

12.5. Executing MEMORY_COLLECT pass (generating $mem cells).

12.6. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Optimizing module MCCU(N_CORES=1).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Finding identical cells in module `\MCCU(N_CORES=1)'.
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AXI_PMU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MCCU(N_CORES=1)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RDC(N_CORES=1,CORE_EVENTS=4)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~61 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AXI_PMU.
  Optimizing cells in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
  Optimizing cells in module \MCCU(N_CORES=1).
  Optimizing cells in module \RDC(N_CORES=1,CORE_EVENTS=4).
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Finding identical cells in module `\MCCU(N_CORES=1)'.
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
Removed a total of 0 cells.

13.6. Executing OPT_RMDFF pass (remove dff with constant values).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AXI_PMU..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Optimizing module MCCU(N_CORES=1).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).

13.9. Finished OPT passes. (There is nothing left to do.)

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $eq.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=1:B_SIGNED=0:B_WIDTH=5:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=1:B_SIGNED=0:B_WIDTH=5:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=1:B_SIGNED=0:B_WIDTH=5:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=5:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=5:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=5:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_not.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=5 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=11:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=11:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=11:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=11:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=11:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=11:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=9:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=9:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=9:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=9:Y_WIDTH=10:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=9:Y_WIDTH=10:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=9:Y_WIDTH=10:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=11:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=11:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=10:Y_WIDTH=11:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=11\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=9\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=10\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=10 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=11 for cells of type $lcu.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$le:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$le:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$le:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_or.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
No more expansions possible.
<suppressed ~5579 debug messages>

15. Executing OPT pass (performing simple optimizations).

15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
<suppressed ~4850 debug messages>
Optimizing module MCCU(N_CORES=1).
<suppressed ~556 debug messages>
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).
<suppressed ~316 debug messages>

15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
<suppressed ~492 debug messages>
Finding identical cells in module `\MCCU(N_CORES=1)'.
<suppressed ~189 debug messages>
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
<suppressed ~252 debug messages>
Removed a total of 311 cells.

15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AXI_PMU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MCCU(N_CORES=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RDC(N_CORES=1,CORE_EVENTS=4)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AXI_PMU.
  Optimizing cells in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
  Optimizing cells in module \MCCU(N_CORES=1).
  Optimizing cells in module \RDC(N_CORES=1,CORE_EVENTS=4).
Performed a total of 0 changes.

15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Finding identical cells in module `\MCCU(N_CORES=1)'.
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
Removed a total of 0 cells.

15.6. Executing OPT_RMDFF pass (remove dff with constant values).

15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AXI_PMU..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..
Removed 1101 unused cells and 2758 unused wires.
<suppressed ~1104 debug messages>

15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Optimizing module MCCU(N_CORES=1).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).

15.9. Rerunning OPT passes. (Maybe there is more to do..)

15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AXI_PMU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MCCU(N_CORES=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RDC(N_CORES=1,CORE_EVENTS=4)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AXI_PMU.
  Optimizing cells in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
  Optimizing cells in module \MCCU(N_CORES=1).
  Optimizing cells in module \RDC(N_CORES=1,CORE_EVENTS=4).
Performed a total of 0 changes.

15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AXI_PMU'.
Finding identical cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Finding identical cells in module `\MCCU(N_CORES=1)'.
Finding identical cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)'.
Removed a total of 0 cells.

15.13. Executing OPT_RMDFF pass (remove dff with constant values).

15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AXI_PMU..
Finding unused cells or wires in module \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)..
Finding unused cells or wires in module \MCCU(N_CORES=1)..
Finding unused cells or wires in module \RDC(N_CORES=1,CORE_EVENTS=4)..

15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module AXI_PMU.
Optimizing module AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0).
Optimizing module MCCU(N_CORES=1).
Optimizing module RDC(N_CORES=1,CORE_EVENTS=4).

15.16. Finished OPT passes. (There is nothing left to do.)

16. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=7.98) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=7.98) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=10.32) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\AXI_PMU':
Mapping DFF cells in module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)':
  mapped 980 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\MCCU(N_CORES=1)':
  mapped 43 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\RDC(N_CORES=1,CORE_EVENTS=4)':
  mapped 69 $_DFF_P_ cells to \DFFPOSX1 cells.

17. Executing ABC pass (technology mapping using ABC).

17.1. Extracting gate netlist of module `\AXI_PMU' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

17.2. Extracting gate netlist of module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)' to `<abc-temp-dir>/input.blif'..
Extracted 5916 gates and 6973 wires to a netlist network with 1055 inputs and 981 outputs.

17.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/PMU_configs/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   4415 ( 11.7 %)   Cap =  5.1 ff (  7.4 %)   Area =    11391.79 ( 84.8 %)   Delay =   553.08 ps  (  6.3 %)               
ABC: Path  0 --      18 : 0    2 pi      A =   0.00  Df =   6.2   -6.1 ps  S =  14.8 ps  Cin =  0.0 ff  Cout =   3.1 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    3011 : 1   10 BUFX2   A =   2.35  Df =  65.5   -7.0 ps  S =  56.2 ps  Cin =  1.5 ff  Cout =  23.4 ff  Cmax = 518.7 ff  G = 1428  
ABC: Path  2 --    5095 : 3    4 NAND3X1 A =   2.35  Df = 121.0  -21.6 ps  S =  68.1 ps  Cin =  2.7 ff  Cout =   8.9 ff  Cmax =   0.0 ff  G =  322  
ABC: Path  3 --    5101 : 2    5 NOR2X1  A =   2.35  Df = 168.7   -0.7 ps  S =  79.0 ps  Cin =  2.3 ff  Cout =  13.3 ff  Cmax =   0.0 ff  G =  550  
ABC: Path  4 --    5152 : 3    2 NAND3X1 A =   2.35  Df = 223.7  -22.3 ps  S =  54.7 ps  Cin =  2.7 ff  Cout =   6.1 ff  Cmax =   0.0 ff  G =  228  
ABC: Path  5 --    5191 : 3    6 NOR3X1  A =   2.82  Df = 300.7   -3.4 ps  S = 120.0 ps  Cin =  3.1 ff  Cout =  16.7 ff  Cmax =  96.9 ff  G =  520  
ABC: Path  6 --    5204 : 3    2 NAND3X1 A =   2.35  Df = 358.0  -13.1 ps  S =  51.5 ps  Cin =  2.7 ff  Cout =   5.7 ff  Cmax =   0.0 ff  G =  209  
ABC: Path  7 --    5209 : 3    5 NOR3X1  A =   2.82  Df = 410.8   -2.0 ps  S = 105.2 ps  Cin =  3.1 ff  Cout =  13.6 ff  Cmax =  96.9 ff  G =  429  
ABC: Path  8 --    5215 : 3    2 NAND3X1 A =   2.35  Df = 470.2  -21.3 ps  S =  63.3 ps  Cin =  2.7 ff  Cout =   7.9 ff  Cmax =   0.0 ff  G =  277  
ABC: Path  9 --    5217 : 2    1 XNOR2X1 A =   4.69  Df = 523.2  -15.6 ps  S =  36.6 ps  Cin =  5.1 ff  Cout =   1.9 ff  Cmax = 228.3 ff  G =   36  
ABC: Path 10 --    5218 : 2    1 AND2X2  A =   2.82  Df = 553.1   -9.0 ps  S =   6.1 ps  Cin =  1.8 ff  Cout =   0.0 ff  Cmax = 505.1 ff  G =    0  
ABC: Start-point = pi17 (\slv_reg[19] [0]).  End-point = po659 ($verific$n8430$319 [31]).
ABC: + write_blif <abc-temp-dir>/output.blif 

17.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:      564
ABC RESULTS:            AND2X2 cells:        8
ABC RESULTS:           AOI21X1 cells:      288
ABC RESULTS:           AOI22X1 cells:      697
ABC RESULTS:             BUFX2 cells:      333
ABC RESULTS:             BUFX4 cells:       36
ABC RESULTS:             INVX1 cells:      149
ABC RESULTS:            MUX2X1 cells:       65
ABC RESULTS:           NAND2X1 cells:      299
ABC RESULTS:           NAND3X1 cells:      330
ABC RESULTS:            NOR2X1 cells:      752
ABC RESULTS:            NOR3X1 cells:      321
ABC RESULTS:           OAI21X1 cells:      488
ABC RESULTS:             OR2X1 cells:       71
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           XNOR2X1 cells:       13
ABC RESULTS:        internal signals:     4937
ABC RESULTS:           input signals:     1055
ABC RESULTS:          output signals:      981
Removing temp directory.

17.3. Extracting gate netlist of module `\MCCU(N_CORES=1)' to `<abc-temp-dir>/input.blif'..
Extracted 1066 gates and 1182 wires to a netlist network with 114 inputs and 44 outputs.

17.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/PMU_configs/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    682 ( 10.9 %)   Cap =  5.2 ff (  5.2 %)   Area =     1766.45 ( 89.4 %)   Delay =   916.62 ps  ( 17.7 %)               
ABC: Path  0 --     106 : 0    3 pi      A =   0.00  Df =  31.4   -7.9 ps  S =  40.1 ps  Cin =  0.0 ff  Cout =  12.7 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     296 : 2    3 XNOR2X1 A =   4.69  Df = 108.5  -30.4 ps  S =  77.4 ps  Cin =  5.1 ff  Cout =  10.4 ff  Cmax = 228.3 ff  G =  199  
ABC: Path  2 --     370 : 3    2 OAI21X1 A =   2.82  Df = 182.9  -38.6 ps  S =  54.9 ps  Cin =  2.5 ff  Cout =   5.0 ff  Cmax = 229.4 ff  G =  199  
ABC: Path  3 --     377 : 3    2 NAND3X1 A =   2.35  Df = 207.8  -24.3 ps  S =  49.4 ps  Cin =  2.7 ff  Cout =   5.0 ff  Cmax =   0.0 ff  G =  183  
ABC: Path  4 --     392 : 3    2 NAND3X1 A =   2.35  Df = 249.0  -42.0 ps  S =  49.3 ps  Cin =  2.7 ff  Cout =   5.0 ff  Cmax =   0.0 ff  G =  183  
ABC: Path  5 --     406 : 3    2 NAND3X1 A =   2.35  Df = 272.6  -24.4 ps  S =  49.4 ps  Cin =  2.7 ff  Cout =   5.0 ff  Cmax =   0.0 ff  G =  183  
ABC: Path  6 --     407 : 3    3 NAND3X1 A =   2.35  Df = 322.7  -46.4 ps  S =  63.2 ps  Cin =  2.7 ff  Cout =   7.9 ff  Cmax =   0.0 ff  G =  287  
ABC: Path  7 --     425 : 3    1 NAND3X1 A =   2.35  Df = 346.3  -33.2 ps  S =  39.7 ps  Cin =  2.7 ff  Cout =   3.0 ff  Cmax =   0.0 ff  G =  108  
ABC: Path  8 --     426 : 3    3 NAND3X1 A =   2.35  Df = 395.0  -56.2 ps  S =  63.4 ps  Cin =  2.7 ff  Cout =   7.8 ff  Cmax =   0.0 ff  G =  285  
ABC: Path  9 --     450 : 3    2 NAND3X1 A =   2.35  Df = 423.1  -38.9 ps  S =  52.8 ps  Cin =  2.7 ff  Cout =   5.7 ff  Cmax =   0.0 ff  G =  210  
ABC: Path 10 --     452 : 3    3 NAND3X1 A =   2.35  Df = 471.1  -59.2 ps  S =  59.0 ps  Cin =  2.7 ff  Cout =   7.0 ff  Cmax =   0.0 ff  G =  257  
ABC: Path 11 --     470 : 3    6 NAND3X1 A =   2.35  Df = 518.3  -23.0 ps  S = 111.7 ps  Cin =  2.7 ff  Cout =  18.3 ff  Cmax =   0.0 ff  G =  671  
ABC: Path 12 --     552 : 3    4 NOR3X1  A =   2.82  Df = 577.2  -20.2 ps  S =  89.2 ps  Cin =  3.1 ff  Cout =  10.2 ff  Cmax =  96.9 ff  G =  319  
ABC: Path 13 --     575 : 3    4 NAND3X1 A =   2.35  Df = 618.6   -0.8 ps  S =  71.0 ps  Cin =  2.7 ff  Cout =   9.5 ff  Cmax =   0.0 ff  G =  352  
ABC: Path 14 --     593 : 3    5 NOR3X1  A =   2.82  Df = 680.0   -6.5 ps  S =  97.0 ps  Cin =  3.1 ff  Cout =  12.3 ff  Cmax =  96.9 ff  G =  383  
ABC: Path 15 --     647 : 3    4 NAND3X1 A =   2.35  Df = 750.7  -21.6 ps  S =  91.5 ps  Cin =  2.7 ff  Cout =  14.0 ff  Cmax =   0.0 ff  G =  512  
ABC: Path 16 --     666 : 2    1 OR2X2   A =   2.82  Df = 809.2  -25.4 ps  S =  24.8 ps  Cin =  2.3 ff  Cout =   5.6 ff  Cmax = 519.7 ff  G =  229  
ABC: Path 17 --     667 : 2    1 XNOR2X1 A =   4.69  Df = 861.6  -18.7 ps  S =  41.8 ps  Cin =  5.1 ff  Cout =   2.9 ff  Cmax = 228.3 ff  G =   54  
ABC: Path 18 --     668 : 4    1 AOI22X1 A =   3.29  Df = 886.7   -6.0 ps  S =  47.5 ps  Cin =  2.8 ff  Cout =   2.7 ff  Cmax =   0.0 ff  G =   97  
ABC: Path 19 --     670 : 3    1 AOI21X1 A =   2.82  Df = 916.6   -6.4 ps  S =  16.2 ps  Cin =  2.6 ff  Cout =   0.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Start-point = pi105 (\ccc_suma_int[0] [2]).  End-point = po30 ($verific$n847$946 [30]).
ABC: + write_blif <abc-temp-dir>/output.blif 

17.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:       39
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:       82
ABC RESULTS:           AOI22X1 cells:        7
ABC RESULTS:             BUFX2 cells:       36
ABC RESULTS:             INVX1 cells:       38
ABC RESULTS:           NAND2X1 cells:      145
ABC RESULTS:           NAND3X1 cells:       61
ABC RESULTS:            NOR2X1 cells:       37
ABC RESULTS:            NOR3X1 cells:       25
ABC RESULTS:           OAI21X1 cells:      104
ABC RESULTS:             OR2X1 cells:       32
ABC RESULTS:             OR2X2 cells:        4
ABC RESULTS:           XNOR2X1 cells:       43
ABC RESULTS:            XOR2X1 cells:       27
ABC RESULTS:          _const0_ cells:        1
ABC RESULTS:        internal signals:     1024
ABC RESULTS:           input signals:      114
ABC RESULTS:          output signals:       44
Removing temp directory.

17.4. Extracting gate netlist of module `\RDC(N_CORES=1,CORE_EVENTS=4)' to `<abc-temp-dir>/input.blif'..
Extracted 666 gates and 775 wires to a netlist network with 107 inputs and 70 outputs.

17.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/PMU_configs/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    488 ( 20.3 %)   Cap =  4.7 ff (  8.4 %)   Area =     1223.00 ( 82.2 %)   Delay =   393.65 ps  ( 22.3 %)               
ABC: Path  0 --      10 : 0    1 pi      A =   0.00  Df =   7.9   -4.9 ps  S =  17.4 ps  Cin =  0.0 ff  Cout =   4.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     309 : 1    9 BUFX4   A =   2.82  Df =  58.3  -18.7 ps  S =  28.7 ps  Cin =  3.9 ff  Cout =  21.3 ff  Cmax = 999.3 ff  G =  530  
ABC: Path  2 --     479 : 4    1 AOI22X1 A =   3.29  Df = 106.9  -29.4 ps  S =  49.8 ps  Cin =  2.8 ff  Cout =   3.0 ff  Cmax =   0.0 ff  G =  108  
ABC: Path  3 --     482 : 3    1 NOR3X1  A =   2.82  Df = 152.1   -8.7 ps  S =  51.2 ps  Cin =  3.1 ff  Cout =   2.7 ff  Cmax =  96.9 ff  G =   85  
ABC: Path  4 --     485 : 3    1 OAI21X1 A =   2.82  Df = 200.3  -29.6 ps  S =  44.0 ps  Cin =  2.5 ff  Cout =   2.9 ff  Cmax = 229.4 ff  G =  116  
ABC: Path  5 --     486 : 4    1 AOI22X1 A =   3.29  Df = 225.0  -26.2 ps  S =  47.5 ps  Cin =  2.8 ff  Cout =   2.7 ff  Cmax =   0.0 ff  G =   95  
ABC: Path  6 --     489 : 3    7 OAI21X1 A =   2.82  Df = 329.7  -77.9 ps  S = 122.6 ps  Cin =  2.5 ff  Cout =  19.8 ff  Cmax = 229.4 ff  G =  775  
ABC: Path  7 --     491 : 3    1 NAND3X1 A =   2.35  Df = 369.8  -72.4 ps  S =  38.3 ps  Cin =  2.7 ff  Cout =   2.7 ff  Cmax =   0.0 ff  G =  101  
ABC: Path  8 --     492 : 3    1 AOI21X1 A =   2.82  Df = 393.7  -41.7 ps  S =  16.3 ps  Cin =  2.6 ff  Cout =   0.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Start-point = pi9 (\max_value[1] [0]).  End-point = po30 ($verific$n634$1025 [0]).
ABC: + write_blif <abc-temp-dir>/output.blif 

17.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:       48
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI21X1 cells:       72
ABC RESULTS:           AOI22X1 cells:       31
ABC RESULTS:             BUFX2 cells:       19
ABC RESULTS:             BUFX4 cells:        8
ABC RESULTS:             INVX1 cells:       72
ABC RESULTS:            MUX2X1 cells:        9
ABC RESULTS:           NAND2X1 cells:       51
ABC RESULTS:           NAND3X1 cells:       37
ABC RESULTS:            NOR2X1 cells:       18
ABC RESULTS:            NOR3X1 cells:        6
ABC RESULTS:           OAI21X1 cells:       54
ABC RESULTS:             OR2X1 cells:       31
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:           XNOR2X1 cells:       24
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:        internal signals:      598
ABC RESULTS:           input signals:      107
ABC RESULTS:          output signals:       70
Removing temp directory.

18. Printing statistics.

=== AXI_PMU ===

   Number of wires:                 45
   Number of wire bits:            142
   Number of public wires:          45
   Number of public wire bits:     142
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)      1

   Area for cell type \AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0) is unknown!

=== AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0) ===

   Number of wires:               6905
   Number of wire bits:          13612
   Number of public wires:          92
   Number of public wire bits:    1574
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5397
     AND2X1                        564
     AND2X2                          8
     AOI21X1                       288
     AOI22X1                       697
     BUFX2                         333
     BUFX4                          36
     DFFPOSX1                      980
     INVX1                         149
     MCCU(N_CORES=1)                 1
     MUX2X1                         65
     NAND2X1                       299
     NAND3X1                       330
     NOR2X1                        752
     NOR3X1                        321
     OAI21X1                       488
     OR2X1                          71
     OR2X2                           1
     RDC(N_CORES=1,CORE_EVENTS=4)      1
     XNOR2X1                        13

   Area for cell type \MCCU(N_CORES=1) is unknown!
   Area for cell type \RDC(N_CORES=1,CORE_EVENTS=4) is unknown!

   Chip area for module '\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)': 19210.326200

=== MCCU(N_CORES=1) ===

   Number of wires:               1162
   Number of wire bits:           2440
   Number of public wires:          18
   Number of public wire bits:     306
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                724
     AND2X1                         39
     AND2X2                          1
     AOI21X1                        82
     AOI22X1                         7
     BUFX2                          36
     DFFPOSX1                       43
     INVX1                          38
     NAND2X1                       145
     NAND3X1                        61
     NOR2X1                         37
     NOR3X1                         25
     OAI21X1                       104
     OR2X1                          32
     OR2X2                           4
     XNOR2X1                        43
     XOR2X1                         27

   Chip area for module '\MCCU(N_CORES=1)': 2109.503500

=== RDC(N_CORES=1,CORE_EVENTS=4) ===

   Number of wires:                858
   Number of wire bits:           1549
   Number of public wires:          20
   Number of public wire bits:     181
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                557
     AND2X1                         48
     AND2X2                          4
     AOI21X1                        72
     AOI22X1                        31
     BUFX2                          19
     BUFX4                           8
     DFFPOSX1                       69
     INVX1                          72
     MUX2X1                          9
     NAND2X1                        51
     NAND3X1                        37
     NOR2X1                         18
     NOR3X1                          6
     OAI21X1                        54
     OR2X1                          31
     OR2X2                           3
     XNOR2X1                        24
     XOR2X1                          1

   Chip area for module '\RDC(N_CORES=1,CORE_EVENTS=4)': 1773.484700

=== design hierarchy ===

   AXI_PMU                           1
     AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)      1
       MCCU(N_CORES=1)               1
       RDC(N_CORES=1,CORE_EVENTS=4)      1

   Number of wires:               8970
   Number of wire bits:          17743
   Number of public wires:         175
   Number of public wire bits:    2203
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6676
     AND2X1                        651
     AND2X2                         13
     AOI21X1                       442
     AOI22X1                       735
     BUFX2                         388
     BUFX4                          44
     DFFPOSX1                     1092
     INVX1                         259
     MUX2X1                         74
     NAND2X1                       495
     NAND3X1                       428
     NOR2X1                        807
     NOR3X1                        352
     OAI21X1                       646
     OR2X1                         134
     OR2X2                           8
     XNOR2X1                        80
     XOR2X1                         28

   Chip area for top module '\AXI_PMU': 23093.314400

Warning: Driver-driver conflict for $verific$n880$947 [10] between cell $auto$simplemap.cc:420:simplemap_dff$13494.D and constant 1'0 in MCCU(N_CORES=1): Resolved using constant.
Removed 0 unused cells and 3213 unused wires.

19. Executing Verilog backend.
Dumping module `\AXI_PMU'.
Dumping module `\AXI_PMU_interface_v1_0_S00_AXI(N_COUNTERS=19,N_CONF_REGS=5,OVERFLOW=0,QUOTA=0)'.
Dumping module `\MCCU(N_CORES=1)'.
Dumping module `\RDC(N_CORES=1,CORE_EVENTS=4)'.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: d76fd1af8b
CPU: user 3.22s system 0.03s, MEM: 181.02 MB total, 64.91 MB resident
Yosys 0.8+472 (git sha1 c907899, clang 3.8.0-2ubuntu4 -fPIC -Os)
Time spent: 19% 19x opt_merge (0 sec), 17% 2x write_verilog (0 sec), ...
