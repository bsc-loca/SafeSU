
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite -- Symbiotic EDA Edition [20190521A ] |
 |                                                                            |
 |  Copyright (C) 2012 - 2019 Symbiotic GmbH                                  |
 |                                                                            |
 |  Licensed to: Symbiotic EDA Eval License Program                           |
 |  Licensee contact: office@symbioticeda.com                                 |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+472 (git sha1 c907899, clang 3.8.0-2ubuntu4 -fPIC -Os)

[license] Signature verified.
[license] License is for an online pool.
[license] 1530 monthly credits (382 hours) left.
[license] 400 extra credits (100 hours) left.
[license] Successfully checked out online license

-- Running command `read -define D8' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.

-- Executing script file `yosys_45.ys' --

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'instances.sv'

3. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../submodules/seu_ip/triple_reg.sv'

4. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../submodules/seu_ip/sbf_reg.sv'

5. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../submodules/seu_ip/ham_reg.sv'

6. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../submodules/seu_ip/reg_sbf.sv'

7. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../submodules/seu_ip/way3_voter.sv'

8. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../submodules/seu_ip/hamming16t11d_enc.sv'

9. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../submodules/seu_ip/hamming16t11d_dec.sv'

10. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../submodules/seu_ip/com_tr.sv'

11. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Apr19_SW_Release, released at Wed May  1 16:05:25 2019.
Adding Verilog module 'instances' to elaboration queue.
Running hier_tree::Elaborate().
VERIFIC-INFO [VERI-1018] instances.sv:20: compiling module 'instances'
VERIFIC-INFO [VERI-1018] ../../submodules/seu_ip/com_tr.sv:21: compiling module 'com_tr(IN_WIDTH=8)'
VERIFIC-INFO [VERI-1018] ../../submodules/seu_ip/triple_reg.sv:16: compiling module 'triple_reg(IN_WIDTH=8)'
VERIFIC-INFO [VERI-1018] ../../submodules/seu_ip/way3_voter.sv:24: compiling module 'way3_voter(IN_WIDTH=8)'
VERIFIC-INFO [VERI-1018] ../../submodules/seu_ip/sbf_reg.sv:16: compiling module 'sbf_reg(IN_WIDTH=8)'
VERIFIC-INFO [VERI-1018] ../../submodules/seu_ip/reg_sbf.sv:26: compiling module 'reg_sbf(IN_WIDTH=8)'
VERIFIC-INFO [VERI-1018] ../../submodules/seu_ip/ham_reg.sv:16: compiling module 'ham_reg'
VERIFIC-INFO [VERI-1018] ../../submodules/seu_ip/hamming16t11d_enc.sv:18: compiling module 'hamming16t11d_enc'
VERIFIC-INFO [VERI-1018] ../../submodules/seu_ip/hamming16t11d_dec.sv:18: compiling module 'hamming16t11d_dec'
VERIFIC-WARNING [VERI-1216] instances.sv:98: index 10 is out of range [7:0] for 'din_i'
Importing module instances.
Importing module com_tr(IN_WIDTH=8).
Importing module triple_reg(IN_WIDTH=8).
Importing module sbf_reg(IN_WIDTH=8).
Importing module way3_voter(IN_WIDTH=8).
Importing module reg_sbf(IN_WIDTH=8).
Importing module ham_reg.
Importing module hamming16t11d_enc.
Importing module hamming16t11d_dec.

12. Executing PREP pass.

12.1. Executing HIERARCHY pass (managing design hierarchy).

12.1.1. Analyzing design hierarchy..
Top module:  \instances
Used module:     \ham_reg
Used module:         \hamming16t11d_dec
Used module:         \hamming16t11d_enc
Used module:     \sbf_reg(IN_WIDTH=8)
Used module:         \reg_sbf(IN_WIDTH=8)
Used module:     \triple_reg(IN_WIDTH=8)
Used module:         \way3_voter(IN_WIDTH=8)
Used module:     \com_tr(IN_WIDTH=8)

12.1.2. Analyzing design hierarchy..
Top module:  \instances
Used module:     \ham_reg
Used module:         \hamming16t11d_dec
Used module:         \hamming16t11d_enc
Used module:     \sbf_reg(IN_WIDTH=8)
Used module:         \reg_sbf(IN_WIDTH=8)
Used module:     \triple_reg(IN_WIDTH=8)
Used module:         \way3_voter(IN_WIDTH=8)
Used module:     \com_tr(IN_WIDTH=8)
Removed 0 unused modules.

12.2. Executing PROC pass (convert processes to netlists).

12.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

12.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

12.2.3. Executing PROC_INIT pass (extract init attributes).

12.2.4. Executing PROC_ARST pass (detect async resets in processes).

12.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

12.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

12.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

12.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

12.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module hamming16t11d_dec.
<suppressed ~1 debug messages>
Optimizing module hamming16t11d_enc.
Optimizing module ham_reg.
Optimizing module reg_sbf(IN_WIDTH=8).
<suppressed ~1 debug messages>
Optimizing module way3_voter(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module instances.

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \instances..
Removed 1 unused cells and 188 unused wires.
<suppressed ~22 debug messages>

12.5. Executing CHECK pass (checking for obvious problems).
checking module com_tr(IN_WIDTH=8)..
checking module ham_reg..
checking module hamming16t11d_dec..
checking module hamming16t11d_enc..
checking module instances..
checking module reg_sbf(IN_WIDTH=8)..
checking module sbf_reg(IN_WIDTH=8)..
checking module triple_reg(IN_WIDTH=8)..
checking module way3_voter(IN_WIDTH=8)..
found and reported 0 problems.

12.6. Executing OPT pass (performing simple optimizations).

12.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).

12.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
Finding identical cells in module `\hamming16t11d_enc'.
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
<suppressed ~6 debug messages>
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
Removed a total of 2 cells.

12.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \com_tr(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ham_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hamming16t11d_dec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hamming16t11d_enc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sbf_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \triple_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

12.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \com_tr(IN_WIDTH=8).
    New input vector for $reduce_or cell $verific$reduce_or_12$../../submodules/seu_ip/com_tr.sv:62$79: { $verific$n44$73 [0] $verific$n44$73 [1] $verific$n44$73 [2] $verific$n44$73 [3] $verific$n44$73 [4] $verific$n44$73 [5] $verific$n44$73 [6] $verific$n44$73 [7] }
  Optimizing cells in module \com_tr(IN_WIDTH=8).
  Optimizing cells in module \ham_reg.
  Optimizing cells in module \hamming16t11d_dec.
  Optimizing cells in module \hamming16t11d_enc.
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=8).
  Optimizing cells in module \sbf_reg(IN_WIDTH=8).
  Optimizing cells in module \triple_reg(IN_WIDTH=8).
  Optimizing cells in module \way3_voter(IN_WIDTH=8).
Performed a total of 1 changes.

12.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
Finding identical cells in module `\hamming16t11d_enc'.
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
Removed a total of 0 cells.

12.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

12.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..

12.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).

12.6.9. Rerunning OPT passes. (Maybe there is more to do..)

12.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \com_tr(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ham_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hamming16t11d_dec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hamming16t11d_enc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sbf_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \triple_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

12.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \com_tr(IN_WIDTH=8).
  Optimizing cells in module \ham_reg.
  Optimizing cells in module \hamming16t11d_dec.
  Optimizing cells in module \hamming16t11d_enc.
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=8).
  Optimizing cells in module \sbf_reg(IN_WIDTH=8).
  Optimizing cells in module \triple_reg(IN_WIDTH=8).
  Optimizing cells in module \way3_voter(IN_WIDTH=8).
Performed a total of 0 changes.

12.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
Finding identical cells in module `\hamming16t11d_enc'.
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
Removed a total of 0 cells.

12.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

12.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..

12.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).

12.6.16. Finished OPT passes. (There is nothing left to do.)

12.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 4) from port A of cell hamming16t11d_dec.$verific$equal_11$../../submodules/seu_ip/hamming16t11d_dec.sv:45$298 ($eq).
Removed top 1 bits (of 4) from port A of cell hamming16t11d_dec.$verific$equal_14$../../submodules/seu_ip/hamming16t11d_dec.sv:46$301 ($eq).
Removed top 1 bits (of 4) from port A of cell hamming16t11d_dec.$verific$equal_17$../../submodules/seu_ip/hamming16t11d_dec.sv:47$304 ($eq).
Removed top 1 bits (of 4) from port A of cell hamming16t11d_dec.$verific$equal_20$../../submodules/seu_ip/hamming16t11d_dec.sv:48$307 ($eq).

12.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

12.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..

12.10. Executing MEMORY_COLLECT pass (generating $mem cells).

12.11. Executing OPT pass (performing simple optimizations).

12.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).

12.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
Finding identical cells in module `\hamming16t11d_enc'.
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
Removed a total of 0 cells.

12.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

12.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..

12.11.5. Finished fast OPT passes.

12.12. Printing statistics.

=== com_tr(IN_WIDTH=8) ===

   Number of wires:                 10
   Number of wire bits:             45
   Number of public wires:           8
   Number of public wire bits:      29
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $dff                            3
     $mux                            1
     $reduce_or                      1
     $xor                            1

=== ham_reg ===

   Number of wires:                 11
   Number of wire bits:            101
   Number of public wires:          10
   Number of public wire bits:      85
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $dff                            1
     $mux                            1
     hamming16t11d_dec               1
     hamming16t11d_enc               1

=== hamming16t11d_dec ===

   Number of wires:                 29
   Number of wire bits:             57
   Number of public wires:           4
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     $and                            1
     $eq                            11
     $mux                           11
     $not                           12
     $reduce_bool                    1
     $reduce_xor                     5

=== hamming16t11d_enc ===

   Number of wires:                  4
   Number of wire bits:             32
   Number of public wires:           4
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $reduce_xor                     5

=== instances ===

   Number of wires:                 11
   Number of wire bits:             35
   Number of public wires:          11
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     com_tr(IN_WIDTH=8)              1
     ham_reg                         1
     sbf_reg(IN_WIDTH=8)             1
     triple_reg(IN_WIDTH=8)          1

=== reg_sbf(IN_WIDTH=8) ===

   Number of wires:                 10
   Number of wire bits:             24
   Number of public wires:           8
   Number of public wire bits:      22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $dff                            1
     $mux                            2
     $reduce_xor                     2
     $xor                            1

=== sbf_reg(IN_WIDTH=8) ===

   Number of wires:                  9
   Number of wire bits:             44
   Number of public wires:           8
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $dff                            1
     $mux                            1
     reg_sbf(IN_WIDTH=8)             1

=== triple_reg(IN_WIDTH=8) ===

   Number of wires:                 17
   Number of wire bits:             94
   Number of public wires:          16
   Number of public wire bits:      86
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $dff                            1
     $mux                            1
     way3_voter(IN_WIDTH=8)          1

=== way3_voter(IN_WIDTH=8) ===

   Number of wires:                 14
   Number of wire bits:             56
   Number of public wires:           6
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $eq                             3
     $mux                            6
     $ne                             1
     $not                            1

=== design hierarchy ===

   instances                         1
     com_tr(IN_WIDTH=8)              1
     ham_reg                         1
       hamming16t11d_dec             1
       hamming16t11d_enc             1
     sbf_reg(IN_WIDTH=8)             1
       reg_sbf(IN_WIDTH=8)           1
     triple_reg(IN_WIDTH=8)          1
       way3_voter(IN_WIDTH=8)        1

   Number of wires:                115
   Number of wire bits:            488
   Number of public wires:          75
   Number of public wire bits:     391
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 75
     $and                            1
     $dff                            7
     $eq                            14
     $mux                           23
     $ne                             1
     $not                           13
     $reduce_bool                    1
     $reduce_or                      1
     $reduce_xor                    12
     $xor                            2

12.13. Executing CHECK pass (checking for obvious problems).
checking module com_tr(IN_WIDTH=8)..
checking module ham_reg..
checking module hamming16t11d_dec..
checking module hamming16t11d_enc..
checking module instances..
checking module reg_sbf(IN_WIDTH=8)..
checking module sbf_reg(IN_WIDTH=8)..
checking module triple_reg(IN_WIDTH=8)..
checking module way3_voter(IN_WIDTH=8)..
found and reported 0 problems.

13. Executing PROC pass (convert processes to netlists).

13.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

13.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

13.3. Executing PROC_INIT pass (extract init attributes).

13.4. Executing PROC_ARST pass (detect async resets in processes).

13.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

13.6. Executing PROC_DLATCH pass (convert process syncs to latches).

13.7. Executing PROC_DFF pass (convert process syncs to FFs).

13.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
Finding identical cells in module `\hamming16t11d_enc'.
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
Removed a total of 0 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \com_tr(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ham_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hamming16t11d_dec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hamming16t11d_enc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sbf_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \triple_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \com_tr(IN_WIDTH=8).
  Optimizing cells in module \ham_reg.
  Optimizing cells in module \hamming16t11d_dec.
  Optimizing cells in module \hamming16t11d_enc.
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=8).
  Optimizing cells in module \sbf_reg(IN_WIDTH=8).
  Optimizing cells in module \triple_reg(IN_WIDTH=8).
  Optimizing cells in module \way3_voter(IN_WIDTH=8).
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
Finding identical cells in module `\hamming16t11d_enc'.
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
Removed a total of 0 cells.

14.6. Executing OPT_RMDFF pass (remove dff with constant values).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).

14.9. Finished OPT passes. (There is nothing left to do.)

15. Executing FSM pass (extract and optimize FSM).

15.1. Executing FSM_DETECT pass (finding FSMs in design).

15.2. Executing FSM_EXTRACT pass (extracting FSM from design).

15.3. Executing FSM_OPT pass (simple optimizations of FSMs).

15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..

15.5. Executing FSM_OPT pass (simple optimizations of FSMs).

15.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

15.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

15.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

16. Executing OPT pass (performing simple optimizations).

16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).

16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
Finding identical cells in module `\hamming16t11d_enc'.
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
Removed a total of 0 cells.

16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \com_tr(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ham_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hamming16t11d_dec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hamming16t11d_enc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sbf_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \triple_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \com_tr(IN_WIDTH=8).
  Optimizing cells in module \ham_reg.
  Optimizing cells in module \hamming16t11d_dec.
  Optimizing cells in module \hamming16t11d_enc.
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=8).
  Optimizing cells in module \sbf_reg(IN_WIDTH=8).
  Optimizing cells in module \triple_reg(IN_WIDTH=8).
  Optimizing cells in module \way3_voter(IN_WIDTH=8).
Performed a total of 0 changes.

16.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
Finding identical cells in module `\hamming16t11d_enc'.
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
Removed a total of 0 cells.

16.6. Executing OPT_RMDFF pass (remove dff with constant values).

16.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..

16.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).

16.9. Finished OPT passes. (There is nothing left to do.)

17. Executing MEMORY pass.

17.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

17.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..

17.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..

17.5. Executing MEMORY_COLLECT pass (generating $mem cells).

17.6. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

18. Executing OPT pass (performing simple optimizations).

18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).

18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
Finding identical cells in module `\hamming16t11d_enc'.
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
Removed a total of 0 cells.

18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \com_tr(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ham_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hamming16t11d_dec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \hamming16t11d_enc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sbf_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \triple_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \com_tr(IN_WIDTH=8).
  Optimizing cells in module \ham_reg.
  Optimizing cells in module \hamming16t11d_dec.
  Optimizing cells in module \hamming16t11d_enc.
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=8).
  Optimizing cells in module \sbf_reg(IN_WIDTH=8).
  Optimizing cells in module \triple_reg(IN_WIDTH=8).
  Optimizing cells in module \way3_voter(IN_WIDTH=8).
Performed a total of 0 changes.

18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
Finding identical cells in module `\hamming16t11d_enc'.
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
Removed a total of 0 cells.

18.6. Executing OPT_RMDFF pass (remove dff with constant values).

18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..

18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).

18.9. Finished OPT passes. (There is nothing left to do.)

19. Executing TECHMAP pass (map to technology primitives).

19.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

19.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_bool.
No more expansions possible.
<suppressed ~75 debug messages>

20. Executing OPT pass (performing simple optimizations).

20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
<suppressed ~27 debug messages>
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
<suppressed ~1 debug messages>
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).
<suppressed ~28 debug messages>

20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
<suppressed ~171 debug messages>
Finding identical cells in module `\hamming16t11d_enc'.
<suppressed ~18 debug messages>
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
<suppressed ~45 debug messages>
Removed a total of 78 cells.

20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \com_tr(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ham_reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \hamming16t11d_dec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \hamming16t11d_enc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sbf_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \triple_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \com_tr(IN_WIDTH=8).
  Optimizing cells in module \ham_reg.
  Optimizing cells in module \hamming16t11d_dec.
  Optimizing cells in module \hamming16t11d_enc.
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=8).
  Optimizing cells in module \sbf_reg(IN_WIDTH=8).
  Optimizing cells in module \triple_reg(IN_WIDTH=8).
  Optimizing cells in module \way3_voter(IN_WIDTH=8).
Performed a total of 0 changes.

20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
Finding identical cells in module `\hamming16t11d_enc'.
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
Removed a total of 0 cells.

20.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..
Removed 14 unused cells and 64 unused wires.
<suppressed ~19 debug messages>

20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).

20.9. Rerunning OPT passes. (Maybe there is more to do..)

20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \com_tr(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ham_reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \hamming16t11d_dec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \hamming16t11d_enc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \instances..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_sbf(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sbf_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \triple_reg(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \way3_voter(IN_WIDTH=8)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \com_tr(IN_WIDTH=8).
  Optimizing cells in module \ham_reg.
  Optimizing cells in module \hamming16t11d_dec.
  Optimizing cells in module \hamming16t11d_enc.
  Optimizing cells in module \instances.
  Optimizing cells in module \reg_sbf(IN_WIDTH=8).
  Optimizing cells in module \sbf_reg(IN_WIDTH=8).
  Optimizing cells in module \triple_reg(IN_WIDTH=8).
  Optimizing cells in module \way3_voter(IN_WIDTH=8).
Performed a total of 0 changes.

20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\com_tr(IN_WIDTH=8)'.
Finding identical cells in module `\ham_reg'.
Finding identical cells in module `\hamming16t11d_dec'.
Finding identical cells in module `\hamming16t11d_enc'.
Finding identical cells in module `\instances'.
Finding identical cells in module `\reg_sbf(IN_WIDTH=8)'.
Finding identical cells in module `\sbf_reg(IN_WIDTH=8)'.
Finding identical cells in module `\triple_reg(IN_WIDTH=8)'.
Finding identical cells in module `\way3_voter(IN_WIDTH=8)'.
Removed a total of 0 cells.

20.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \com_tr(IN_WIDTH=8)..
Finding unused cells or wires in module \ham_reg..
Finding unused cells or wires in module \hamming16t11d_dec..
Finding unused cells or wires in module \hamming16t11d_enc..
Finding unused cells or wires in module \instances..
Finding unused cells or wires in module \reg_sbf(IN_WIDTH=8)..
Finding unused cells or wires in module \sbf_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \triple_reg(IN_WIDTH=8)..
Finding unused cells or wires in module \way3_voter(IN_WIDTH=8)..

20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module com_tr(IN_WIDTH=8).
Optimizing module ham_reg.
Optimizing module hamming16t11d_dec.
Optimizing module hamming16t11d_enc.
Optimizing module instances.
Optimizing module reg_sbf(IN_WIDTH=8).
Optimizing module sbf_reg(IN_WIDTH=8).
Optimizing module triple_reg(IN_WIDTH=8).
Optimizing module way3_voter(IN_WIDTH=8).

20.16. Finished OPT passes. (There is nothing left to do.)

21. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=7.98) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=7.98) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=10.32) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\com_tr(IN_WIDTH=8)':
  mapped 17 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\ham_reg':
  mapped 16 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\hamming16t11d_dec':
Mapping DFF cells in module `\hamming16t11d_enc':
Mapping DFF cells in module `\instances':
Mapping DFF cells in module `\reg_sbf(IN_WIDTH=8)':
  mapped 1 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\sbf_reg(IN_WIDTH=8)':
  mapped 8 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\triple_reg(IN_WIDTH=8)':
  mapped 8 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\way3_voter(IN_WIDTH=8)':

22. Executing ABC pass (technology mapping using ABC).

22.1. Extracting gate netlist of module `\com_tr(IN_WIDTH=8)' to `<abc-temp-dir>/input.blif'..
Extracted 23 gates and 49 wires to a netlist network with 25 inputs and 9 outputs.

22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/FT-resource-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     21 (  4.8 %)   Cap =  3.2 ff ( 21.4 %)   Area =       68.99 ( 57.1 %)   Delay =   138.63 ps  ( 57.1 %)               
ABC: Path  0 --      15 : 0    1 pi      A =   0.00  Df =  10.4   -1.9 ps  S =  21.0 ps  Cin =  0.0 ff  Cout =   5.7 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      38 : 2    1 XOR2X1  A =   4.69  Df =  63.1  -19.2 ps  S =  47.3 ps  Cin =  5.3 ff  Cout =   3.0 ff  Cmax = 223.3 ff  G =   57  
ABC: Path  2 --      41 : 3    1 NOR3X1  A =   2.82  Df = 107.5  -12.0 ps  S =  53.1 ps  Cin =  3.1 ff  Cout =   2.8 ff  Cmax =  96.9 ff  G =   87  
ABC: Path  3 --      46 : 3    1 NAND3X1 A =   2.35  Df = 138.6  -19.7 ps  S =  26.2 ps  Cin =  2.7 ff  Cout =   0.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Start-point = pi14 (\reg2 [2]).  End-point = po0 (\error_int).
ABC: + write_blif <abc-temp-dir>/output.blif 

22.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:        9
ABC RESULTS:             BUFX2 cells:        1
ABC RESULTS:           NAND3X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:           XNOR2X1 cells:        2
ABC RESULTS:            XOR2X1 cells:        6
ABC RESULTS:        internal signals:       15
ABC RESULTS:           input signals:       25
ABC RESULTS:          output signals:        9
Removing temp directory.

22.2. Extracting gate netlist of module `\ham_reg' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 34 wires to a netlist network with 17 inputs and 16 outputs.

22.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/FT-resource-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     18 ( 11.1 %)   Cap =  2.1 ff ( 45.6 %)   Area =       42.71 (  5.6 %)   Delay =   126.61 ps  ( 66.7 %)               
ABC: Path  0 --       2 : 0    1 pi     A =   0.00  Df =   3.1   -3.1 ps  S =  10.3 ps  Cin =  0.0 ff  Cout =   1.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      34 : 1    7 BUFX2  A =   2.35  Df =  56.4   -7.1 ps  S =  42.3 ps  Cin =  1.5 ff  Cout =  17.8 ff  Cmax = 518.7 ff  G = 1078  
ABC: Path  2 --      36 : 1   10 BUFX4  A =   2.82  Df =  99.6   -7.7 ps  S =  32.7 ps  Cin =  3.9 ff  Cout =  22.9 ff  Cmax = 999.3 ff  G =  531  
ABC: Path  3 --      37 : 2    1 AND2X1 A =   2.35  Df = 126.6  -11.2 ps  S =  23.7 ps  Cin =  2.1 ff  Cout =   0.0 ff  Cmax = 137.4 ff  G =    0  
ABC: Start-point = pi1 (\rstn_i).  End-point = po1 ($verific$n22$193 [2]).
ABC: + write_blif <abc-temp-dir>/output.blif 

22.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:       16
ABC RESULTS:             BUFX2 cells:        1
ABC RESULTS:             BUFX4 cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:       16
Removing temp directory.

22.3. Extracting gate netlist of module `\hamming16t11d_dec' to `<abc-temp-dir>/input.blif'..
Extracted 74 gates and 91 wires to a netlist network with 16 inputs and 12 outputs.

22.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/FT-resource-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     67 ( 10.4 %)   Cap =  6.1 ff (  3.3 %)   Area =      247.79 ( 92.5 %)   Delay =   422.13 ps  ( 55.2 %)               
ABC: Path  0 --      16 : 0    1 pi      A =   0.00  Df =   7.9   -4.9 ps  S =  17.4 ps  Cin =  0.0 ff  Cout =   4.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      34 : 1    3 BUFX4   A =   2.82  Df =  56.1  -20.4 ps  S =  22.6 ps  Cin =  3.9 ff  Cout =  16.3 ff  Cmax = 999.3 ff  G =  397  
ABC: Path  2 --      51 : 2    1 XOR2X1  A =   4.69  Df = 115.4  -24.8 ps  S =  59.2 ps  Cin =  5.3 ff  Cout =   5.6 ff  Cmax = 223.3 ff  G =  100  
ABC: Path  3 --      52 : 2    3 XNOR2X1 A =   4.69  Df = 212.0  -35.9 ps  S = 101.7 ps  Cin =  5.1 ff  Cout =  15.4 ff  Cmax = 228.3 ff  G =  293  
ABC: Path  4 --      55 : 2    5 XNOR2X1 A =   4.69  Df = 293.4  -21.1 ps  S =  90.5 ps  Cin =  5.1 ff  Cout =  13.1 ff  Cmax = 228.3 ff  G =  253  
ABC: Path  5 --      65 : 2    3 NOR2X1  A =   2.35  Df = 338.7  -16.5 ps  S =  44.9 ps  Cin =  2.3 ff  Cout =   6.2 ff  Cmax =   0.0 ff  G =  262  
ABC: Path  6 --      70 : 2    1 NAND2X1 A =   1.88  Df = 376.5  -29.0 ps  S =  49.8 ps  Cin =  2.0 ff  Cout =   5.6 ff  Cmax =   0.0 ff  G =  265  
ABC: Path  7 --      71 : 2    1 XNOR2X1 A =   4.69  Df = 422.1  -13.3 ps  S =  27.7 ps  Cin =  5.1 ff  Cout =   0.0 ff  Cmax = 228.3 ff  G =    0  
ABC: Start-point = pi15 (\hv_i [14]).  End-point = po2 (\data_o [2]).
ABC: + write_blif <abc-temp-dir>/output.blif 

22.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:        4
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:             BUFX2 cells:        6
ABC RESULTS:             BUFX4 cells:        1
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:            NOR2X1 cells:        2
ABC RESULTS:           XNOR2X1 cells:       29
ABC RESULTS:            XOR2X1 cells:       11
ABC RESULTS:        internal signals:       63
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       12
Removing temp directory.

22.4. Extracting gate netlist of module `\hamming16t11d_enc' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 43 wires to a netlist network with 11 inputs and 5 outputs.

22.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/FT-resource-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     22 (  4.5 %)   Cap =  6.7 ff (  0.9 %)   Area =      101.37 ( 95.5 %)   Delay =   354.83 ps  ( 27.3 %)               
ABC: Path  0 --       7 : 0    1 pi      A =   0.00  Df =   7.9   -4.9 ps  S =  17.4 ps  Cin =  0.0 ff  Cout =   4.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      20 : 1    3 BUFX4   A =   2.82  Df =  56.0  -20.5 ps  S =  22.3 ps  Cin =  3.9 ff  Cout =  16.1 ff  Cmax = 999.3 ff  G =  392  
ABC: Path  2 --      27 : 2    1 XOR2X1  A =   4.69  Df = 115.3  -24.8 ps  S =  59.2 ps  Cin =  5.3 ff  Cout =   5.6 ff  Cmax = 223.3 ff  G =  100  
ABC: Path  3 --      28 : 2    1 XNOR2X1 A =   4.69  Df = 180.0  -22.3 ps  S =  54.5 ps  Cin =  5.1 ff  Cout =   5.6 ff  Cmax = 228.3 ff  G =  104  
ABC: Path  4 --      29 : 2    2 XNOR2X1 A =   4.69  Df = 244.3  -22.4 ps  S =  54.6 ps  Cin =  5.1 ff  Cout =   5.6 ff  Cmax = 228.3 ff  G =  105  
ABC: Path  5 --      37 : 2    1 XNOR2X1 A =   4.69  Df = 308.8  -22.5 ps  S =  54.9 ps  Cin =  5.1 ff  Cout =   5.7 ff  Cmax = 228.3 ff  G =  106  
ABC: Path  6 --      38 : 2    1 XOR2X1  A =   4.69  Df = 354.8  -13.3 ps  S =  32.0 ps  Cin =  5.3 ff  Cout =   0.0 ff  Cmax = 223.3 ff  G =    0  
ABC: Start-point = pi6 (\data_i [0]).  End-point = po4 (\ocheck_int).
ABC: + write_blif <abc-temp-dir>/output.blif 

22.4.2. Re-integrating ABC results.
ABC RESULTS:             BUFX4 cells:        1
ABC RESULTS:           XNOR2X1 cells:       14
ABC RESULTS:            XOR2X1 cells:        7
ABC RESULTS:        internal signals:       27
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        5
Removing temp directory.

22.5. Extracting gate netlist of module `\instances' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.6. Extracting gate netlist of module `\reg_sbf(IN_WIDTH=8)' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 35 wires to a netlist network with 18 inputs and 2 outputs.

22.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/FT-resource-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     16 (  0.0 %)   Cap =  4.7 ff (  0.0 %)   Area =       71.33 (100.0 %)   Delay =   246.43 ps  ( 25.0 %)               
ABC: Path  0 --      18 : 0    1 pi      A =   0.00  Df =  10.4   -1.9 ps  S =  21.0 ps  Cin =  0.0 ff  Cout =   5.7 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      33 : 2    1 XOR2X1  A =   4.69  Df =  71.4  -24.1 ps  S =  59.5 ps  Cin =  5.3 ff  Cout =   5.6 ff  Cmax = 223.3 ff  G =  100  
ABC: Path  2 --      34 : 2    1 XNOR2X1 A =   4.69  Df = 136.1  -22.2 ps  S =  54.5 ps  Cin =  5.1 ff  Cout =   5.6 ff  Cmax = 228.3 ff  G =  104  
ABC: Path  3 --      35 : 2    1 XNOR2X1 A =   4.69  Df = 200.3  -22.4 ps  S =  54.5 ps  Cin =  5.1 ff  Cout =   5.6 ff  Cmax = 228.3 ff  G =  104  
ABC: Path  4 --      36 : 2    1 XNOR2X1 A =   4.69  Df = 246.4  -13.1 ps  S =  27.7 ps  Cin =  5.1 ff  Cout =   0.0 ff  Cmax = 228.3 ff  G =    0  
ABC: Start-point = pi17 (\reg_parity_int).  End-point = po1 (\error_o).
ABC: + write_blif <abc-temp-dir>/output.blif 

22.6.2. Re-integrating ABC results.
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:       10
ABC RESULTS:            XOR2X1 cells:        4
ABC RESULTS:        internal signals:       15
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:        2
Removing temp directory.

22.7. Extracting gate netlist of module `\sbf_reg(IN_WIDTH=8)' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 9 inputs and 8 outputs.

22.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/FT-resource-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =      9 ( 11.1 %)   Cap =  1.8 ff (  2.2 %)   Area =       25.34 ( 88.9 %)   Delay =    88.62 ps  (100.0 %)               
ABC: Path  0 --       2 : 0    1 pi     A =   0.00  Df =   7.9   -4.9 ps  S =  17.4 ps  Cin =  0.0 ff  Cout =   4.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      18 : 1    8 BUFX4  A =   2.82  Df =  55.8  -21.6 ps  S =  20.3 ps  Cin =  3.9 ff  Cout =  14.5 ff  Cmax = 999.3 ff  G =  365  
ABC: Path  2 --      19 : 2    1 AND2X2 A =   2.82  Df =  88.6  -25.4 ps  S =   4.0 ps  Cin =  1.8 ff  Cout =   0.0 ff  Cmax = 505.1 ff  G =    0  
ABC: Start-point = pi1 (\rstn_i).  End-point = po0 ($verific$n15$130 [1]).
ABC: + write_blif <abc-temp-dir>/output.blif 

22.7.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        8
ABC RESULTS:             BUFX4 cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

22.8. Extracting gate netlist of module `\triple_reg(IN_WIDTH=8)' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 9 inputs and 8 outputs.

22.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/FT-resource-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =      9 ( 11.1 %)   Cap =  1.8 ff (  2.2 %)   Area =       25.34 ( 88.9 %)   Delay =    88.62 ps  (100.0 %)               
ABC: Path  0 --       2 : 0    1 pi     A =   0.00  Df =   7.9   -4.9 ps  S =  17.4 ps  Cin =  0.0 ff  Cout =   4.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      18 : 1    8 BUFX4  A =   2.82  Df =  55.8  -21.6 ps  S =  20.3 ps  Cin =  3.9 ff  Cout =  14.5 ff  Cmax = 999.3 ff  G =  365  
ABC: Path  2 --      19 : 2    1 AND2X2 A =   2.82  Df =  88.6  -25.4 ps  S =   4.0 ps  Cin =  1.8 ff  Cout =   0.0 ff  Cmax = 505.1 ff  G =    0  
ABC: Start-point = pi1 (\rstn_i).  End-point = po0 ($verific$n42$82 [1]).
ABC: + write_blif <abc-temp-dir>/output.blif 

22.8.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        8
ABC RESULTS:             BUFX4 cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

22.9. Extracting gate netlist of module `\way3_voter(IN_WIDTH=8)' to `<abc-temp-dir>/input.blif'..
Extracted 72 gates and 98 wires to a netlist network with 24 inputs and 10 outputs.

22.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/FT-resource-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     63 ( 27.0 %)   Cap =  5.1 ff (  0.3 %)   Area =      200.86 ( 98.4 %)   Delay =   238.75 ps  ( 34.9 %)               
ABC: Path  0 --      24 : 0    2 pi      A =   0.00  Df =  26.4   -5.9 ps  S =  35.7 ps  Cin =  0.0 ff  Cout =  11.2 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      40 : 2    1 XNOR2X1 A =   4.69  Df =  77.3  -18.6 ps  S =  40.0 ps  Cin =  5.1 ff  Cout =   2.5 ff  Cmax = 228.3 ff  G =   47  
ABC: Path  2 --      43 : 3    1 NAND3X1 A =   2.35  Df = 100.5   -0.5 ps  S =  40.8 ps  Cin =  2.7 ff  Cout =   3.1 ff  Cmax =   0.0 ff  G =  115  
ABC: Path  3 --      48 : 3    1 NOR3X1  A =   2.82  Df = 154.1  -17.5 ps  S =  58.5 ps  Cin =  3.1 ff  Cout =   4.0 ff  Cmax =  96.9 ff  G =  125  
ABC: Path  4 --      49 : 1    9 BUFX4   A =   2.82  Df = 198.8   -2.6 ps  S =  48.7 ps  Cin =  3.9 ff  Cout =  36.0 ff  Cmax = 999.3 ff  G =  891  
ABC: Path  5 --      97 : 3    1 NOR3X1  A =   2.82  Df = 238.7   -0.5 ps  S =  39.2 ps  Cin =  3.1 ff  Cout =   0.0 ff  Cmax =  96.9 ff  G =    0  
ABC: Start-point = pi23 (\in2 [7]).  End-point = po9 (\error2_o).
ABC: + write_blif <abc-temp-dir>/output.blif 

22.9.2. Re-integrating ABC results.
ABC RESULTS:             BUFX4 cells:        1
ABC RESULTS:             INVX1 cells:       16
ABC RESULTS:            MUX2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        4
ABC RESULTS:           NAND3X1 cells:        6
ABC RESULTS:            NOR3X1 cells:        4
ABC RESULTS:           XNOR2X1 cells:       24
ABC RESULTS:        internal signals:       64
ABC RESULTS:           input signals:       24
ABC RESULTS:          output signals:       10
Removing temp directory.

23. Printing statistics.

=== com_tr(IN_WIDTH=8) ===

   Number of wires:                 58
   Number of wire bits:             97
   Number of public wires:           8
   Number of public wire bits:      29
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 38
     AND2X1                          9
     BUFX2                           1
     DFFPOSX1                       17
     NAND3X1                         1
     NOR3X1                          2
     XNOR2X1                         2
     XOR2X1                          6

   Chip area for module '\com_tr(IN_WIDTH=8)': 204.614800

=== ham_reg ===

   Number of wires:                 46
   Number of wire bits:            136
   Number of public wires:          10
   Number of public wire bits:      85
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     AND2X1                         16
     BUFX2                           1
     BUFX4                           1
     DFFPOSX1                       16
     hamming16t11d_dec               1
     hamming16t11d_enc               1

   Area for cell type \hamming16t11d_enc is unknown!
   Area for cell type \hamming16t11d_dec is unknown!

   Chip area for module '\ham_reg': 170.355900

=== hamming16t11d_dec ===

   Number of wires:                132
   Number of wire bits:            202
   Number of public wires:           4
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 67
     AND2X1                          4
     AND2X2                          2
     AOI21X1                         1
     BUFX2                           6
     BUFX4                           1
     NAND2X1                        11
     NOR2X1                          2
     XNOR2X1                        29
     XOR2X1                         11

   Chip area for module '\hamming16t11d_dec': 247.790400

=== hamming16t11d_enc ===

   Number of wires:                 47
   Number of wire bits:             95
   Number of public wires:           4
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     BUFX4                           1
     XNOR2X1                        14
     XOR2X1                          7

   Chip area for module '\hamming16t11d_enc': 101.368800

=== instances ===

   Number of wires:                 11
   Number of wire bits:             35
   Number of public wires:          11
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     com_tr(IN_WIDTH=8)              1
     ham_reg                         1
     sbf_reg(IN_WIDTH=8)             1
     triple_reg(IN_WIDTH=8)          1

   Area for cell type \com_tr(IN_WIDTH=8) is unknown!
   Area for cell type \triple_reg(IN_WIDTH=8) is unknown!
   Area for cell type \sbf_reg(IN_WIDTH=8) is unknown!
   Area for cell type \ham_reg is unknown!

=== reg_sbf(IN_WIDTH=8) ===

   Number of wires:                 47
   Number of wire bits:             69
   Number of public wires:           8
   Number of public wire bits:      22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 17
     AOI21X1                         1
     DFFPOSX1                        1
     OAI21X1                         1
     XNOR2X1                        10
     XOR2X1                          4

   Chip area for module '\reg_sbf(IN_WIDTH=8)': 79.311700

=== sbf_reg(IN_WIDTH=8) ===

   Number of wires:                 27
   Number of wire bits:             62
   Number of public wires:           8
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     AND2X2                          8
     BUFX4                           1
     DFFPOSX1                        8
     reg_sbf(IN_WIDTH=8)             1

   Area for cell type \reg_sbf(IN_WIDTH=8) is unknown!

   Chip area for module '\sbf_reg(IN_WIDTH=8)': 89.167000

=== triple_reg(IN_WIDTH=8) ===

   Number of wires:                 35
   Number of wire bits:            112
   Number of public wires:          16
   Number of public wire bits:      86
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     AND2X2                          8
     BUFX4                           1
     DFFPOSX1                        8
     way3_voter(IN_WIDTH=8)          1

   Area for cell type \way3_voter(IN_WIDTH=8) is unknown!

   Chip area for module '\triple_reg(IN_WIDTH=8)': 89.167000

=== way3_voter(IN_WIDTH=8) ===

   Number of wires:                108
   Number of wire bits:            183
   Number of public wires:           6
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 63
     BUFX4                           1
     INVX1                          16
     MUX2X1                          8
     NAND2X1                         4
     NAND3X1                         6
     NOR3X1                          4
     XNOR2X1                        24

   Chip area for module '\way3_voter(IN_WIDTH=8)': 200.860400

=== design hierarchy ===

   instances                         1
     com_tr(IN_WIDTH=8)              1
     ham_reg                         1
       hamming16t11d_dec             1
       hamming16t11d_enc             1
     sbf_reg(IN_WIDTH=8)             1
       reg_sbf(IN_WIDTH=8)           1
     triple_reg(IN_WIDTH=8)          1
       way3_voter(IN_WIDTH=8)        1

   Number of wires:                511
   Number of wire bits:            991
   Number of public wires:          75
   Number of public wire bits:     391
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                275
     AND2X1                         29
     AND2X2                         18
     AOI21X1                         2
     BUFX2                           8
     BUFX4                           6
     DFFPOSX1                       50
     INVX1                          16
     MUX2X1                          8
     NAND2X1                        15
     NAND3X1                         7
     NOR2X1                          2
     NOR3X1                          6
     OAI21X1                         1
     XNOR2X1                        79
     XOR2X1                         28

   Chip area for top module '\instances': 1182.636000

Removed 0 unused cells and 240 unused wires.

24. Executing Verilog backend.
Dumping module `\com_tr(IN_WIDTH=8)'.
Dumping module `\ham_reg'.
Dumping module `\hamming16t11d_dec'.
Dumping module `\hamming16t11d_enc'.
Dumping module `\instances'.
Dumping module `\reg_sbf(IN_WIDTH=8)'.
Dumping module `\sbf_reg(IN_WIDTH=8)'.
Dumping module `\triple_reg(IN_WIDTH=8)'.
Dumping module `\way3_voter(IN_WIDTH=8)'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 845349ee6d
CPU: user 0.28s system 0.04s, MEM: 304.36 MB total, 26.93 MB resident
Yosys 0.8+472 (git sha1 c907899, clang 3.8.0-2ubuntu4 -fPIC -Os)
Time spent: 18% 14x opt_expr (0 sec), 17% 2x write_verilog (0 sec), ...
