
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite -- YosysHQ Edition [202107021222]     |
 |                                                                            |
 |  Copyright (C) 2012 - 2021 YosysHQ GmbH                                    |
 |                                                                            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4081 (git sha1 862e84eb, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `yosys_45_nft.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'hdl_wrappers/top_nft.sv'

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/crossbar/hdl/crossbar.sv'

3. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/seu_ip/triple_reg.sv'

4. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/seu_ip/sbf_reg.sv'

5. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/seu_ip/ham_reg.sv'

6. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/seu_ip/reg_sbf.sv'

7. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/seu_ip/way3_voter.sv'

8. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/seu_ip/hamming16t11d_enc.sv'

9. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/seu_ip/hamming16t11d_dec.sv'

10. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/seu_ip/com_tr.sv'

11. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../hdl/PMU_raw.sv'

12. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../hdl/pmu_ahb.sv'

13. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/MCCU/hdl/MCCU.sv'

14. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/RDC/hdl/RDC.sv'

15. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/quota/PMU_quota.sv'

16. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/counters/PMU_counters.sv'

17. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/overflow/PMU_overflow.sv'

18. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/seu_ip/hamming32t26d_dec.sv'

19. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/seu_ip/hamming32t26d_enc.sv'

20. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/seu_ip/way3ua_voter.sv'

21. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '../../../submodules/seu_ip/way3u2a_voter.sv'

22. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jun21_SW_Release, released at Thu Jul  1 15:20:54 2021.
Statically elaborating the Verific parse tree.
VERIFIC-INFO [VERI-1018] hdl_wrappers/top_nft.sv:20: compiling module 'top_nft'
VERIFIC-INFO [VERI-1018] ../../../submodules/seu_ip/sbf_reg.sv:16: compiling module 'sbf_reg'
VERIFIC-INFO [VERI-1018] ../../../submodules/seu_ip/ham_reg.sv:16: compiling module 'ham_reg'
Checking initial blocks for assertions.
Adding Verilog module 'top_nft' to elaboration queue.
Running hier_tree::Elaborate().
VERIFIC-INFO [VERI-1018] hdl_wrappers/top_nft.sv:20: compiling module 'top_nft'
VERIFIC-INFO [VERI-1018] ../../../hdl/pmu_ahb.sv:24: compiling module 'pmu_ahb(haddr=-2146435072,hmask=4095)'
VERIFIC-INFO [VERI-1018] ../../../hdl/PMU_raw.sv:28: compiling module 'PMU_raw(N_COUNTERS=24)'
VERIFIC-INFO [VERI-1018] ../../../submodules/crossbar/hdl/crossbar.sv:25: compiling module 'crossbar_default'
VERIFIC-INFO [VERI-1018] ../../../submodules/counters/PMU_counters.sv:20: compiling module 'PMU_counters(N_COUNTERS=24)'
VERIFIC-INFO [VERI-1018] ../../../submodules/overflow/PMU_overflow.sv:23: compiling module 'PMU_overflow(N_COUNTERS=24)'
VERIFIC-INFO [VERI-1018] ../../../submodules/quota/PMU_quota.sv:32: compiling module 'PMU_quota(N_COUNTERS=24)'
VERIFIC-INFO [VERI-1018] ../../../submodules/MCCU/hdl/MCCU.sv:21: compiling module 'MCCU(N_CORES=4,CORE_EVENTS=2)'
VERIFIC-INFO [VERI-1018] ../../../submodules/RDC/hdl/RDC.sv:18: compiling module 'RDC_default'
Importing module top_nft.
Importing module pmu_ahb(haddr=-2146435072,hmask=4095).
Importing module PMU_raw(N_COUNTERS=24).
Importing module crossbar_default.
Importing module PMU_counters(N_COUNTERS=24).
Importing module PMU_quota(N_COUNTERS=24).
Importing module PMU_overflow(N_COUNTERS=24).
Importing module MCCU(N_CORES=4,CORE_EVENTS=2).
Importing module RDC_default.

23. Executing PREP pass.

23.1. Executing HIERARCHY pass (managing design hierarchy).

23.1.1. Analyzing design hierarchy..
Top module:  \top_nft
Used module:     \pmu_ahb(haddr=-2146435072,hmask=4095)
Used module:         \PMU_raw(N_COUNTERS=24)
Used module:             \RDC_default
Used module:             \MCCU(N_CORES=4,CORE_EVENTS=2)
Used module:             \PMU_quota(N_COUNTERS=24)
Used module:             \PMU_overflow(N_COUNTERS=24)
Used module:             \PMU_counters(N_COUNTERS=24)
Used module:             \crossbar_default

23.1.2. Analyzing design hierarchy..
Top module:  \top_nft
Used module:     \pmu_ahb(haddr=-2146435072,hmask=4095)
Used module:         \PMU_raw(N_COUNTERS=24)
Used module:             \RDC_default
Used module:             \MCCU(N_CORES=4,CORE_EVENTS=2)
Used module:             \PMU_quota(N_COUNTERS=24)
Used module:             \PMU_overflow(N_COUNTERS=24)
Used module:             \PMU_counters(N_COUNTERS=24)
Used module:             \crossbar_default
Removed 0 unused modules.

23.2. Executing PROC pass (convert processes to netlists).

23.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

23.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

23.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

23.2.4. Executing PROC_INIT pass (extract init attributes).

23.2.5. Executing PROC_ARST pass (detect async resets in processes).

23.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

23.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

23.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

23.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

23.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

23.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module RDC_default.
<suppressed ~1 debug messages>
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
<suppressed ~4 debug messages>
Optimizing module PMU_overflow(N_COUNTERS=24).
<suppressed ~1 debug messages>
Optimizing module PMU_quota(N_COUNTERS=24).
<suppressed ~4 debug messages>
Optimizing module PMU_counters(N_COUNTERS=24).
<suppressed ~1 debug messages>
Optimizing module crossbar_default.
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
<suppressed ~3 debug messages>
Optimizing module top_nft.

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..
Removed 4 unused cells and 7482 unused wires.
<suppressed ~453 debug messages>

23.5. Executing CHECK pass (checking for obvious problems).
Checking module MCCU(N_CORES=4,CORE_EVENTS=2)...
Checking module PMU_counters(N_COUNTERS=24)...
Checking module PMU_overflow(N_COUNTERS=24)...
Checking module PMU_quota(N_COUNTERS=24)...
Checking module PMU_raw(N_COUNTERS=24)...
Checking module RDC_default...
Checking module crossbar_default...
Checking module pmu_ahb(haddr=-2146435072,hmask=4095)...
Checking module top_nft...
Found and reported 0 problems.

23.6. Executing OPT pass (performing simple optimizations).

23.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

23.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

23.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MCCU(N_CORES=4,CORE_EVENTS=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_counters(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_overflow(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_quota(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_raw(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RDC_default..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \crossbar_default..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pmu_ahb(haddr=-2146435072,hmask=4095)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_nft..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~124 debug messages>

23.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MCCU(N_CORES=4,CORE_EVENTS=2).
  Optimizing cells in module \PMU_counters(N_COUNTERS=24).
  Optimizing cells in module \PMU_overflow(N_COUNTERS=24).
  Optimizing cells in module \PMU_quota(N_COUNTERS=24).
  Optimizing cells in module \PMU_raw(N_COUNTERS=24).
  Optimizing cells in module \RDC_default.
  Optimizing cells in module \crossbar_default.
  Optimizing cells in module \pmu_ahb(haddr=-2146435072,hmask=4095).
  Optimizing cells in module \top_nft.
Performed a total of 0 changes.

23.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

23.6.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..

23.6.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

23.6.8. Finished OPT passes. (There is nothing left to do.)

23.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 32 bits (of 64) from port A of cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$LessThan_58$../../../submodules/MCCU/hdl/MCCU.sv:193$8589 ($lt).
Removed top 32 bits (of 64) from port A of cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$LessThan_131$../../../submodules/MCCU/hdl/MCCU.sv:206$8594 ($lt).
Removed top 32 bits (of 64) from port A of cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$LessThan_344$../../../submodules/MCCU/hdl/MCCU.sv:193$8608 ($lt).
Removed top 32 bits (of 64) from port A of cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$LessThan_417$../../../submodules/MCCU/hdl/MCCU.sv:206$8613 ($lt).
Removed top 32 bits (of 64) from port A of cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$LessThan_630$../../../submodules/MCCU/hdl/MCCU.sv:193$8627 ($lt).
Removed top 32 bits (of 64) from port A of cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$LessThan_703$../../../submodules/MCCU/hdl/MCCU.sv:206$8632 ($lt).
Removed top 32 bits (of 64) from port A of cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$LessThan_916$../../../submodules/MCCU/hdl/MCCU.sv:193$8646 ($lt).
Removed top 32 bits (of 64) from port A of cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$LessThan_989$../../../submodules/MCCU/hdl/MCCU.sv:206$8651 ($lt).
Removed top 55 bits (of 256) from mux cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$mux_1234$../../../submodules/MCCU/hdl/MCCU.sv:254$8698 ($mux).
Removed top 55 bits (of 256) from FF cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$Nft_suma.ccc_suma_int_reg$../../../submodules/MCCU/hdl/MCCU.sv:255$8701 ($dff).
Removed top 55 bits (of 64) from port B of cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$LessThan_58$../../../submodules/MCCU/hdl/MCCU.sv:193$8589 ($lt).
Removed top 23 bits (of 32) from port B of cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$sub_60$../../../submodules/MCCU/hdl/MCCU.sv:197$8590 ($sub).
Removed top 55 bits (of 64) from port B of cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$LessThan_131$../../../submodules/MCCU/hdl/MCCU.sv:206$8594 ($lt).
Removed top 23 bits (of 32) from port B of cell MCCU(N_CORES=4,CORE_EVENTS=2).$verific$sub_133$../../../submodules/MCCU/hdl/MCCU.sv:210$8595 ($sub).
Removed top 55 bits (of 256) from wire MCCU(N_CORES=4,CORE_EVENTS=2).$verific$n4343$8538.
Removed top 1 bits (of 5) from wire MCCU(N_CORES=4,CORE_EVENTS=2).$verific$n6121$8549.
Removed top 55 bits (of 64) from wire MCCU(N_CORES=4,CORE_EVENTS=2).Nft_suma.ccc_suma_int[0].
Removed top 2 bits (of 8) from wire MCCU(N_CORES=4,CORE_EVENTS=2).events_weights_int[3][1].
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_4$../../../submodules/counters/PMU_counters.sv:68$7919 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_142$../../../submodules/counters/PMU_counters.sv:68$7929 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_280$../../../submodules/counters/PMU_counters.sv:68$7938 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_418$../../../submodules/counters/PMU_counters.sv:68$7947 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_556$../../../submodules/counters/PMU_counters.sv:68$7956 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_694$../../../submodules/counters/PMU_counters.sv:68$7965 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_832$../../../submodules/counters/PMU_counters.sv:68$7974 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_970$../../../submodules/counters/PMU_counters.sv:68$7983 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_1108$../../../submodules/counters/PMU_counters.sv:68$7992 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_1246$../../../submodules/counters/PMU_counters.sv:68$8001 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_1384$../../../submodules/counters/PMU_counters.sv:68$8010 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_1522$../../../submodules/counters/PMU_counters.sv:68$8019 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_1660$../../../submodules/counters/PMU_counters.sv:68$8028 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_1798$../../../submodules/counters/PMU_counters.sv:68$8037 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_1936$../../../submodules/counters/PMU_counters.sv:68$8046 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_2074$../../../submodules/counters/PMU_counters.sv:68$8055 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_2212$../../../submodules/counters/PMU_counters.sv:68$8064 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_2350$../../../submodules/counters/PMU_counters.sv:68$8073 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_2488$../../../submodules/counters/PMU_counters.sv:68$8082 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_2626$../../../submodules/counters/PMU_counters.sv:68$8091 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_2764$../../../submodules/counters/PMU_counters.sv:68$8100 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_2902$../../../submodules/counters/PMU_counters.sv:68$8109 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_3040$../../../submodules/counters/PMU_counters.sv:68$8118 ($add).
Removed top 31 bits (of 32) from port B of cell PMU_counters(N_COUNTERS=24).$verific$add_3178$../../../submodules/counters/PMU_counters.sv:68$8126 ($add).
Removed top 4 bits (of 5) from port B of cell PMU_quota(N_COUNTERS=24).$verific$add_141$../../../submodules/quota/PMU_quota.sv:122$8311 ($add).
Removed top 1 bits (of 6) from port A of cell PMU_quota(N_COUNTERS=24).$verific$sub_154$../../../submodules/quota/PMU_quota.sv:141$8320 ($sub).
Removed top 5 bits (of 6) from port B of cell PMU_quota(N_COUNTERS=24).$verific$sub_154$../../../submodules/quota/PMU_quota.sv:141$8320 ($sub).
Removed top 1 bits (of 6) from port Y of cell PMU_quota(N_COUNTERS=24).$verific$sub_154$../../../submodules/quota/PMU_quota.sv:141$8320 ($sub).
Removed top 5 bits (of 37) from port B of cell PMU_quota(N_COUNTERS=24).$verific$add_156$../../../submodules/quota/PMU_quota.sv:141$8323 ($add).
Removed top 5 bits (of 37) from port A of cell PMU_quota(N_COUNTERS=24).$verific$LessThan_171$../../../submodules/quota/PMU_quota.sv:163$8334 ($lt).
Removed top 1 bits (of 6) from wire PMU_quota(N_COUNTERS=24).$verific$n2760$8217.
Removed top 31 bits (of 128) from port A of cell PMU_raw(N_COUNTERS=24).$verific$mux_173$../../../hdl/PMU_raw.sv:409$3932 ($shr).
Removed top 7 bits (of 8) from port B of cell RDC_default.$verific$add_9$../../../submodules/RDC/hdl/RDC.sv:79$8877 ($add).
Removed top 7 bits (of 8) from port B of cell RDC_default.$verific$add_50$../../../submodules/RDC/hdl/RDC.sv:79$8885 ($add).
Removed top 7 bits (of 8) from port B of cell RDC_default.$verific$add_91$../../../submodules/RDC/hdl/RDC.sv:79$8893 ($add).
Removed top 7 bits (of 8) from port B of cell RDC_default.$verific$add_132$../../../submodules/RDC/hdl/RDC.sv:79$8901 ($add).
Removed top 7 bits (of 8) from port B of cell RDC_default.$verific$add_173$../../../submodules/RDC/hdl/RDC.sv:79$8909 ($add).
Removed top 7 bits (of 8) from port B of cell RDC_default.$verific$add_214$../../../submodules/RDC/hdl/RDC.sv:79$8917 ($add).
Removed top 7 bits (of 8) from port B of cell RDC_default.$verific$add_255$../../../submodules/RDC/hdl/RDC.sv:79$8925 ($add).
Removed top 7 bits (of 8) from port B of cell RDC_default.$verific$add_296$../../../submodules/RDC/hdl/RDC.sv:79$8933 ($add).
Removed top 63 bits (of 64) from port A of cell pmu_ahb(haddr=-2146435072,hmask=4095).$verific$Decoder_31$../../../hdl/pmu_ahb.sv:285$331 ($shl).
Removed top 17 bits (of 64) from port Y of cell pmu_ahb(haddr=-2146435072,hmask=4095).$verific$Decoder_31$../../../hdl/pmu_ahb.sv:285$331 ($shl).
Removed top 1 bits (of 8) from port A of cell pmu_ahb(haddr=-2146435072,hmask=4095).$verific$mux_153$../../../hdl/pmu_ahb.sv:469$446 ($shr).
Removed top 17 bits (of 64) from wire pmu_ahb(haddr=-2146435072,hmask=4095).$verific$n7744$188.

23.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..
Removed 0 unused cells and 7 unused wires.
<suppressed ~3 debug messages>

23.9. Executing MEMORY_COLLECT pass (generating $mem cells).

23.10. Executing OPT pass (performing simple optimizations).

23.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

23.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

23.10.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..

23.10.4. Finished fast OPT passes.

23.11. Printing statistics.

=== MCCU(N_CORES=4,CORE_EVENTS=2) ===

   Number of wires:                121
   Number of wire bits:           2235
   Number of public wires:          45
   Number of public wire bits:     740
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 84
     $add                            4
     $and                           17
     $dff                            3
     $lt                             8
     $mux                           38
     $not                            5
     $or                             1
     $sub                            8

=== PMU_counters(N_COUNTERS=24) ===

   Number of wires:                223
   Number of wire bits:           6198
   Number of public wires:         103
   Number of public wire bits:    3102
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                169
     $add                           24
     $and                           24
     $dff                           24
     $mux                           97

=== PMU_overflow(N_COUNTERS=24) ===

   Number of wires:                 42
   Number of wire bits:            970
   Number of public wires:          35
   Number of public wire bits:     894
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $and                            1
     $dff                            1
     $mux                            4
     $not                            2
     $or                             3
     $reduce_and                    24
     $reduce_or                      1

=== PMU_quota(N_COUNTERS=24) ===

   Number of wires:                105
   Number of wire bits:           2696
   Number of public wires:          59
   Number of public wire bits:    1664
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 76
     $add                            2
     $and                           24
     $dff                            4
     $le                             1
     $logic_not                      1
     $lt                             1
     $mux                           35
     $ne                             1
     $not                            1
     $or                             4
     $shr                            1
     $sub                            1

=== PMU_raw(N_COUNTERS=24) ===

   Number of wires:                227
   Number of wire bits:           5159
   Number of public wires:         221
   Number of public wire bits:    5153
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 17
     $and                            2
     $dff                            2
     $mux                            4
     $not                            2
     $shr                            1
     MCCU(N_CORES=4,CORE_EVENTS=2)      1
     PMU_counters(N_COUNTERS=24)      1
     PMU_overflow(N_COUNTERS=24)      1
     PMU_quota(N_COUNTERS=24)        1
     RDC_default                     1
     crossbar_default                1

=== RDC_default ===

   Number of wires:                140
   Number of wire bits:            824
   Number of public wires:          51
   Number of public wire bits:     325
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                113
     $add                            8
     $and                            8
     $dff                           18
     $eq                             8
     $le                             8
     $lt                             8
     $mux                           52
     $or                             2
     $reduce_or                      1

=== crossbar_default ===

   Number of wires:                 30
   Number of wire bits:            226
   Number of public wires:          29
   Number of public wire bits:     202
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 26
     $dff                            1
     $mux                            1
     $shr                           24

=== pmu_ahb(haddr=-2146435072,hmask=4095) ===

   Number of wires:                336
   Number of wire bits:          11068
   Number of public wires:         229
   Number of public wire bits:    6356
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                123
     $and                            3
     $dff                            5
     $le                             1
     $mux                          102
     $not                            2
     $shl                            1
     $shr                            8
     PMU_raw(N_COUNTERS=24)          1

=== top_nft ===

   Number of wires:                 22
   Number of wire bits:            158
   Number of public wires:          22
   Number of public wire bits:     158
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     pmu_ahb(haddr=-2146435072,hmask=4095)      1

=== design hierarchy ===

   top_nft                           1
     pmu_ahb(haddr=-2146435072,hmask=4095)      1
       PMU_raw(N_COUNTERS=24)        1
         MCCU(N_CORES=4,CORE_EVENTS=2)      1
         PMU_counters(N_COUNTERS=24)      1
         PMU_overflow(N_COUNTERS=24)      1
         PMU_quota(N_COUNTERS=24)      1
         RDC_default                 1
         crossbar_default            1

   Number of wires:               1246
   Number of wire bits:          29534
   Number of public wires:         794
   Number of public wire bits:   18594
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                637
     $add                           38
     $and                           79
     $dff                           58
     $eq                             8
     $le                            10
     $logic_not                      1
     $lt                            17
     $mux                          333
     $ne                             1
     $not                           12
     $or                            10
     $reduce_and                    24
     $reduce_or                      2
     $shl                            1
     $shr                           34
     $sub                            9

23.12. Executing CHECK pass (checking for obvious problems).
Checking module MCCU(N_CORES=4,CORE_EVENTS=2)...
Checking module PMU_counters(N_COUNTERS=24)...
Checking module PMU_overflow(N_COUNTERS=24)...
Checking module PMU_quota(N_COUNTERS=24)...
Checking module PMU_raw(N_COUNTERS=24)...
Checking module RDC_default...
Checking module crossbar_default...
Checking module pmu_ahb(haddr=-2146435072,hmask=4095)...
Checking module top_nft...
Found and reported 0 problems.

24. Executing PROC pass (convert processes to netlists).

24.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

24.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

24.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

24.4. Executing PROC_INIT pass (extract init attributes).

24.5. Executing PROC_ARST pass (detect async resets in processes).

24.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

24.7. Executing PROC_DLATCH pass (convert process syncs to latches).

24.8. Executing PROC_DFF pass (convert process syncs to FFs).

24.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

24.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MCCU(N_CORES=4,CORE_EVENTS=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_counters(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_overflow(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_quota(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_raw(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RDC_default..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \crossbar_default..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pmu_ahb(haddr=-2146435072,hmask=4095)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_nft..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~124 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MCCU(N_CORES=4,CORE_EVENTS=2).
  Optimizing cells in module \PMU_counters(N_COUNTERS=24).
  Optimizing cells in module \PMU_overflow(N_COUNTERS=24).
  Optimizing cells in module \PMU_quota(N_COUNTERS=24).
  Optimizing cells in module \PMU_raw(N_COUNTERS=24).
  Optimizing cells in module \RDC_default.
  Optimizing cells in module \crossbar_default.
  Optimizing cells in module \pmu_ahb(haddr=-2146435072,hmask=4095).
  Optimizing cells in module \top_nft.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $verific$interruption_quota_q_reg$../../../submodules/MCCU/hdl/MCCU.sv:478$8720 ($dff) from module MCCU(N_CORES=4,CORE_EVENTS=2) (D = $auto$wreduce.cc:454:run$9030 [3:0], Q = \interruption_quota_q, rval = 4'0000).
Adding SRST signal on $verific$Nft_suma.quota_int_reg$../../../submodules/MCCU/hdl/MCCU.sv:255$8700 ($dff) from module MCCU(N_CORES=4,CORE_EVENTS=2) (D = { $verific$n6082$8555 $verific$n6090$8561 $verific$n6098$8567 $verific$n6106$8573 }, Q = { \Nft_suma.quota_int[0] \Nft_suma.quota_int[1] \Nft_suma.quota_int[2] \Nft_suma.quota_int[3] }, rval = 128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9038 ($sdff) from module MCCU(N_CORES=4,CORE_EVENTS=2) (D = $verific$n6083$8556, Q = \Nft_suma.quota_int[0]).
Adding EN signal on $auto$opt_dff.cc:702:run$9038 ($sdff) from module MCCU(N_CORES=4,CORE_EVENTS=2) (D = $verific$n6091$8562, Q = \Nft_suma.quota_int[1]).
Adding EN signal on $auto$opt_dff.cc:702:run$9038 ($sdff) from module MCCU(N_CORES=4,CORE_EVENTS=2) (D = $verific$n6099$8568, Q = \Nft_suma.quota_int[2]).
Adding EN signal on $auto$opt_dff.cc:702:run$9038 ($sdff) from module MCCU(N_CORES=4,CORE_EVENTS=2) (D = $verific$n6107$8574, Q = \Nft_suma.quota_int[3]).
Adding SRST signal on $verific$Nft_suma.ccc_suma_int_reg$../../../submodules/MCCU/hdl/MCCU.sv:255$8701 ($dff) from module MCCU(N_CORES=4,CORE_EVENTS=2) (D = { $verific$n3854$8460 $verific$n3855$8529 $verific$n3946$8469 $verific$n3947$8531 $verific$n4038$8478 $verific$n4039$8533 $verific$n4130$8487 $verific$n4131$8535 }, Q = { \Nft_suma.ccc_suma_int[0] \Nft_suma.ccc_suma_int[1] [8:0] \Nft_suma.ccc_suma_int[2] [8:0] \Nft_suma.ccc_suma_int[3] [8:0] }, rval = 36'000000000000000000000000000000000000).
Adding SRST signal on $verific$slv_reg[9]_reg$../../../submodules/counters/PMU_counters.sv:83$8004 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11840$7873, Q = \slv_reg[9], rval = 0).
Adding SRST signal on $verific$slv_reg[8]_reg$../../../submodules/counters/PMU_counters.sv:83$7995 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11835$7870, Q = \slv_reg[8], rval = 0).
Adding SRST signal on $verific$slv_reg[7]_reg$../../../submodules/counters/PMU_counters.sv:83$7986 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11830$7867, Q = \slv_reg[7], rval = 0).
Adding SRST signal on $verific$slv_reg[6]_reg$../../../submodules/counters/PMU_counters.sv:83$7977 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11825$7864, Q = \slv_reg[6], rval = 0).
Adding SRST signal on $verific$slv_reg[5]_reg$../../../submodules/counters/PMU_counters.sv:83$7968 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11820$7861, Q = \slv_reg[5], rval = 0).
Adding SRST signal on $verific$slv_reg[4]_reg$../../../submodules/counters/PMU_counters.sv:83$7959 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11815$7858, Q = \slv_reg[4], rval = 0).
Adding SRST signal on $verific$slv_reg[3]_reg$../../../submodules/counters/PMU_counters.sv:83$7950 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11810$7855, Q = \slv_reg[3], rval = 0).
Adding SRST signal on $verific$slv_reg[2]_reg$../../../submodules/counters/PMU_counters.sv:83$7941 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11805$7852, Q = \slv_reg[2], rval = 0).
Adding SRST signal on $verific$slv_reg[23]_reg$../../../submodules/counters/PMU_counters.sv:83$8129 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11910$7915, Q = \slv_reg[23], rval = 0).
Adding SRST signal on $verific$slv_reg[22]_reg$../../../submodules/counters/PMU_counters.sv:83$8121 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11905$7912, Q = \slv_reg[22], rval = 0).
Adding SRST signal on $verific$slv_reg[21]_reg$../../../submodules/counters/PMU_counters.sv:83$8112 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11900$7909, Q = \slv_reg[21], rval = 0).
Adding SRST signal on $verific$slv_reg[20]_reg$../../../submodules/counters/PMU_counters.sv:83$8103 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11895$7906, Q = \slv_reg[20], rval = 0).
Adding SRST signal on $verific$slv_reg[1]_reg$../../../submodules/counters/PMU_counters.sv:83$7932 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11800$7849, Q = \slv_reg[1], rval = 0).
Adding SRST signal on $verific$slv_reg[19]_reg$../../../submodules/counters/PMU_counters.sv:83$8094 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11890$7903, Q = \slv_reg[19], rval = 0).
Adding SRST signal on $verific$slv_reg[18]_reg$../../../submodules/counters/PMU_counters.sv:83$8085 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11885$7900, Q = \slv_reg[18], rval = 0).
Adding SRST signal on $verific$slv_reg[17]_reg$../../../submodules/counters/PMU_counters.sv:83$8076 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11880$7897, Q = \slv_reg[17], rval = 0).
Adding SRST signal on $verific$slv_reg[16]_reg$../../../submodules/counters/PMU_counters.sv:83$8067 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11875$7894, Q = \slv_reg[16], rval = 0).
Adding SRST signal on $verific$slv_reg[15]_reg$../../../submodules/counters/PMU_counters.sv:83$8058 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11870$7891, Q = \slv_reg[15], rval = 0).
Adding SRST signal on $verific$slv_reg[14]_reg$../../../submodules/counters/PMU_counters.sv:83$8049 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11865$7888, Q = \slv_reg[14], rval = 0).
Adding SRST signal on $verific$slv_reg[13]_reg$../../../submodules/counters/PMU_counters.sv:83$8040 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11860$7885, Q = \slv_reg[13], rval = 0).
Adding SRST signal on $verific$slv_reg[12]_reg$../../../submodules/counters/PMU_counters.sv:83$8031 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11855$7882, Q = \slv_reg[12], rval = 0).
Adding SRST signal on $verific$slv_reg[11]_reg$../../../submodules/counters/PMU_counters.sv:83$8022 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11850$7879, Q = \slv_reg[11], rval = 0).
Adding SRST signal on $verific$slv_reg[10]_reg$../../../submodules/counters/PMU_counters.sv:83$8013 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11845$7876, Q = \slv_reg[10], rval = 0).
Adding SRST signal on $verific$slv_reg[0]_reg$../../../submodules/counters/PMU_counters.sv:83$7923 ($dff) from module PMU_counters(N_COUNTERS=24) (D = $verific$n11795$7846, Q = \slv_reg[0], rval = 0).
Adding SRST signal on $verific$past_intr_vect_reg$../../../submodules/overflow/PMU_overflow.sv:90$8420 ($dff) from module PMU_overflow(N_COUNTERS=24) (D = $verific$n158$8371, Q = \past_intr_vect, rval = 24'000000000000000000000000).
Adding SRST signal on $verific$suma_int_reg$../../../submodules/quota/PMU_quota.sv:145$8316 ($dff) from module PMU_quota(N_COUNTERS=24) (D = $verific$n2801$8219, Q = \suma_int, rval = 37'0000000000000000000000000000000000000).
Adding SRST signal on $verific$state_int_reg$../../../submodules/quota/PMU_quota.sv:125$8305 ($dff) from module PMU_quota(N_COUNTERS=24) (D = $verific$n2606$8210, Q = \state_int, rval = 5'00000).
Adding SRST signal on $verific$old_mask_reg$../../../submodules/quota/PMU_quota.sv:100$8337 ($dff) from module PMU_quota(N_COUNTERS=24) (D = \quota_mask_i, Q = \old_mask, rval = 24'000000000000000000000000).
Adding SRST signal on $verific$hold_intr_quota_reg$../../../submodules/quota/PMU_quota.sv:159$8327 ($dff) from module PMU_quota(N_COUNTERS=24) (D = $verific$n3033$8149, Q = \hold_intr_quota, rval = 1'0).
Adding SRST signal on $verific$genblk15.RDC_enable_int_reg$../../../hdl/PMU_raw.sv:594$7165 ($dff) from module PMU_raw(N_COUNTERS=24) (D = \regs_i[29] [6], Q = \genblk15.RDC_enable_int, rval = 1'0).
Adding SRST signal on $verific$MCCU_enable_int_reg$../../../hdl/PMU_raw.sv:533$7662 ($dff) from module PMU_raw(N_COUNTERS=24) (D = \regs_i[29] [0], Q = \MCCU_enable_int, rval = 1'0).
Adding SRST signal on $verific$watermark_int[7]_reg$../../../submodules/RDC/hdl/RDC.sv:157$9016 ($dff) from module RDC_default (D = $verific$n1698$8870, Q = \watermark_int[7], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9215 ($sdff) from module RDC_default (D = \max_value[7], Q = \watermark_int[7]).
Adding SRST signal on $verific$watermark_int[6]_reg$../../../submodules/RDC/hdl/RDC.sv:157$9010 ($dff) from module RDC_default (D = $verific$n1694$8867, Q = \watermark_int[6], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9219 ($sdff) from module RDC_default (D = \max_value[6], Q = \watermark_int[6]).
Adding SRST signal on $verific$watermark_int[5]_reg$../../../submodules/RDC/hdl/RDC.sv:157$9003 ($dff) from module RDC_default (D = $verific$n1690$8864, Q = \watermark_int[5], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9223 ($sdff) from module RDC_default (D = \max_value[5], Q = \watermark_int[5]).
Adding SRST signal on $verific$watermark_int[4]_reg$../../../submodules/RDC/hdl/RDC.sv:157$8996 ($dff) from module RDC_default (D = $verific$n1686$8861, Q = \watermark_int[4], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9227 ($sdff) from module RDC_default (D = \max_value[4], Q = \watermark_int[4]).
Adding SRST signal on $verific$watermark_int[3]_reg$../../../submodules/RDC/hdl/RDC.sv:157$8989 ($dff) from module RDC_default (D = $verific$n1682$8858, Q = \watermark_int[3], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9231 ($sdff) from module RDC_default (D = \max_value[3], Q = \watermark_int[3]).
Adding SRST signal on $verific$watermark_int[2]_reg$../../../submodules/RDC/hdl/RDC.sv:157$8982 ($dff) from module RDC_default (D = $verific$n1678$8855, Q = \watermark_int[2], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9235 ($sdff) from module RDC_default (D = \max_value[2], Q = \watermark_int[2]).
Adding SRST signal on $verific$watermark_int[1]_reg$../../../submodules/RDC/hdl/RDC.sv:157$8975 ($dff) from module RDC_default (D = $verific$n1674$8852, Q = \watermark_int[1], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9239 ($sdff) from module RDC_default (D = \max_value[1], Q = \watermark_int[1]).
Adding SRST signal on $verific$watermark_int[0]_reg$../../../submodules/RDC/hdl/RDC.sv:157$8968 ($dff) from module RDC_default (D = $verific$n1670$8849, Q = \watermark_int[0], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9243 ($sdff) from module RDC_default (D = \max_value[0], Q = \watermark_int[0]).
Adding SRST signal on $verific$past_interruption_rdc_o_reg$../../../submodules/RDC/hdl/RDC.sv:137$8955 ($dff) from module RDC_default (D = \interruption_rdc_o, Q = \past_interruption_rdc_o, rval = 1'0).
Adding SRST signal on $verific$max_value[7]_reg$../../../submodules/RDC/hdl/RDC.sv:85$8934 ($dff) from module RDC_default (D = $verific$n1661$8847, Q = \max_value[7], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9252 ($sdff) from module RDC_default (D = $verific$n601$8795, Q = \max_value[7]).
Adding SRST signal on $verific$max_value[6]_reg$../../../submodules/RDC/hdl/RDC.sv:85$8926 ($dff) from module RDC_default (D = $verific$n1656$8844, Q = \max_value[6], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9256 ($sdff) from module RDC_default (D = $verific$n519$8792, Q = \max_value[6]).
Adding SRST signal on $verific$max_value[5]_reg$../../../submodules/RDC/hdl/RDC.sv:85$8918 ($dff) from module RDC_default (D = $verific$n1651$8841, Q = \max_value[5], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9260 ($sdff) from module RDC_default (D = $verific$n437$8789, Q = \max_value[5]).
Adding SRST signal on $verific$max_value[4]_reg$../../../submodules/RDC/hdl/RDC.sv:85$8910 ($dff) from module RDC_default (D = $verific$n1646$8838, Q = \max_value[4], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9264 ($sdff) from module RDC_default (D = $verific$n355$8786, Q = \max_value[4]).
Adding SRST signal on $verific$max_value[3]_reg$../../../submodules/RDC/hdl/RDC.sv:85$8902 ($dff) from module RDC_default (D = $verific$n1641$8835, Q = \max_value[3], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9268 ($sdff) from module RDC_default (D = $verific$n273$8783, Q = \max_value[3]).
Adding SRST signal on $verific$max_value[2]_reg$../../../submodules/RDC/hdl/RDC.sv:85$8894 ($dff) from module RDC_default (D = $verific$n1636$8832, Q = \max_value[2], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9272 ($sdff) from module RDC_default (D = $verific$n191$8780, Q = \max_value[2]).
Adding SRST signal on $verific$max_value[1]_reg$../../../submodules/RDC/hdl/RDC.sv:85$8886 ($dff) from module RDC_default (D = $verific$n1631$8829, Q = \max_value[1], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9276 ($sdff) from module RDC_default (D = $verific$n109$8777, Q = \max_value[1]).
Adding SRST signal on $verific$max_value[0]_reg$../../../submodules/RDC/hdl/RDC.sv:85$8878 ($dff) from module RDC_default (D = $verific$n1626$8826, Q = \max_value[0], rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$9280 ($sdff) from module RDC_default (D = $verific$n27$8774, Q = \max_value[0]).
Adding SRST signal on $verific$interruption_vector_rdc_o_reg$../../../submodules/RDC/hdl/RDC.sv:118$8938 ($dff) from module RDC_default (D = { $verific$n705$8798 $verific$n711$8800 $verific$n717$8802 $verific$n723$8804 }, Q = { \interruption_vector_rdc_o[0] \interruption_vector_rdc_o[1] \interruption_vector_rdc_o[2] \interruption_vector_rdc_o[3] }, rval = 8'00000000).
Adding SRST signal on $verific$vector_o_reg$../../../submodules/crossbar/hdl/crossbar.sv:65$7717 ($dff) from module crossbar_default (D = { \mux_int [0] \mux_int [1] \mux_int [2] \mux_int [3] \mux_int [4] \mux_int [5] \mux_int [6] \mux_int [7] \mux_int [8] \mux_int [9] \mux_int [10] \mux_int [11] \mux_int [12] \mux_int [13] \mux_int [14] \mux_int [15] \mux_int [16] \mux_int [17] \mux_int [18] \mux_int [19] \mux_int [20] \mux_int [21] \mux_int [22] \mux_int [23] }, Q = { \vector_o [0] \vector_o [1] \vector_o [2] \vector_o [3] \vector_o [4] \vector_o [5] \vector_o [6] \vector_o [7] \vector_o [8] \vector_o [9] \vector_o [10] \vector_o [11] \vector_o [12] \vector_o [13] \vector_o [14] \vector_o [15] \vector_o [16] \vector_o [17] \vector_o [18] \vector_o [19] \vector_o [20] \vector_o [21] \vector_o [22] \vector_o [23] }, rval = 24'000000000000000000000000).
Adding SRST signal on $verific$slv_reg_reg$../../../hdl/pmu_ahb.sv:267$315 ($dff) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = { \slv_reg_D[0] \slv_reg_D[1] \slv_reg_D[2] \slv_reg_D[3] \slv_reg_D[4] \slv_reg_D[5] \slv_reg_D[6] \slv_reg_D[7] \slv_reg_D[8] \slv_reg_D[9] \slv_reg_D[10] \slv_reg_D[11] \slv_reg_D[12] \slv_reg_D[13] \slv_reg_D[14] \slv_reg_D[15] \slv_reg_D[16] \slv_reg_D[17] \slv_reg_D[18] \slv_reg_D[19] \slv_reg_D[20] \slv_reg_D[21] \slv_reg_D[22] \slv_reg_D[23] \slv_reg_D[24] \slv_reg_D[25] \slv_reg_D[26] \slv_reg_D[27] \slv_reg_D[28] \slv_reg_D[29] \slv_reg_D[30] \slv_reg_D[31] \slv_reg_D[32] \slv_reg_D[33] \slv_reg_D[34] \slv_reg_D[35] \slv_reg_D[36] \slv_reg_D[37] \slv_reg_D[38] \slv_reg_D[39] \slv_reg_D[40] \slv_reg_D[41] \slv_reg_D[42] \slv_reg_D[43] \slv_reg_D[44] \slv_reg_D[45] \slv_reg_D[46] }, Q = { \slv_reg[0] \slv_reg[1] \slv_reg[2] \slv_reg[3] \slv_reg[4] \slv_reg[5] \slv_reg[6] \slv_reg[7] \slv_reg[8] \slv_reg[9] \slv_reg[10] \slv_reg[11] \slv_reg[12] \slv_reg[13] \slv_reg[14] \slv_reg[15] \slv_reg[16] \slv_reg[17] \slv_reg[18] \slv_reg[19] \slv_reg[20] \slv_reg[21] \slv_reg[22] \slv_reg[23] \slv_reg[24] \slv_reg[25] \slv_reg[26] \slv_reg[27] \slv_reg[28] \slv_reg[29] \slv_reg[30] \slv_reg[31] \slv_reg[32] \slv_reg[33] \slv_reg[34] \slv_reg[35] \slv_reg[36] \slv_reg[37] \slv_reg[38] \slv_reg[39] \slv_reg[40] \slv_reg[41] \slv_reg[42] \slv_reg[43] \slv_reg[44] \slv_reg[45] \slv_reg[46] }, rval
Adding SRST signal on $verific$genblk3.state_reg$../../../hdl/pmu_ahb.sv:435$324 ($dff) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \next, Q = \genblk3.state, rval = 2'00).
Adding SRST signal on $verific$genblk1.write_reg$../../../hdl/pmu_ahb.sv:202$313 ($dff) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \address_phase[write_D], Q = \genblk1.write, rval = 1'0).
Adding SRST signal on $verific$genblk1.select_reg$../../../hdl/pmu_ahb.sv:202$3586 ($dff) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \address_phase[select_D], Q = \genblk1.select, rval = 1'0).
Adding SRST signal on $verific$genblk1.master_addr_reg$../../../hdl/pmu_ahb.sv:202$314 ($dff) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \address_phase[master_addr_D], Q = \genblk1.master_addr, rval = 0).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..
Removed 127 unused cells and 127 unused wires.
<suppressed ~135 debug messages>

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
<suppressed ~4 debug messages>
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MCCU(N_CORES=4,CORE_EVENTS=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_counters(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_overflow(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_quota(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_raw(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RDC_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \crossbar_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pmu_ahb(haddr=-2146435072,hmask=4095)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_nft..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~96 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MCCU(N_CORES=4,CORE_EVENTS=2).
  Optimizing cells in module \PMU_counters(N_COUNTERS=24).
  Optimizing cells in module \PMU_overflow(N_COUNTERS=24).
  Optimizing cells in module \PMU_quota(N_COUNTERS=24).
  Optimizing cells in module \PMU_raw(N_COUNTERS=24).
  Optimizing cells in module \RDC_default.
  Optimizing cells in module \crossbar_default.
  Optimizing cells in module \pmu_ahb(haddr=-2146435072,hmask=4095).
  Optimizing cells in module \top_nft.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
<suppressed ~138 debug messages>
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
<suppressed ~3 debug messages>
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
<suppressed ~15 debug messages>
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
<suppressed ~3 debug messages>
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 53 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..
Removed 0 unused cells and 53 unused wires.
<suppressed ~4 debug messages>

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

25.16. Rerunning OPT passes. (Maybe there is more to do..)

25.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MCCU(N_CORES=4,CORE_EVENTS=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_counters(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_overflow(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_quota(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_raw(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RDC_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \crossbar_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pmu_ahb(haddr=-2146435072,hmask=4095)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_nft..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~96 debug messages>

25.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MCCU(N_CORES=4,CORE_EVENTS=2).
  Optimizing cells in module \PMU_counters(N_COUNTERS=24).
  Optimizing cells in module \PMU_overflow(N_COUNTERS=24).
  Optimizing cells in module \PMU_quota(N_COUNTERS=24).
  Optimizing cells in module \PMU_raw(N_COUNTERS=24).
  Optimizing cells in module \RDC_default.
  Optimizing cells in module \crossbar_default.
  Optimizing cells in module \pmu_ahb(haddr=-2146435072,hmask=4095).
  Optimizing cells in module \top_nft.
Performed a total of 0 changes.

25.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

25.20. Executing OPT_DFF pass (perform DFF optimizations).

25.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..

25.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

25.23. Finished OPT passes. (There is nothing left to do.)

26. Executing FSM pass (extract and optimize FSM).

26.1. Executing FSM_DETECT pass (finding FSMs in design).

26.2. Executing FSM_EXTRACT pass (extracting FSM from design).

26.3. Executing FSM_OPT pass (simple optimizations of FSMs).

26.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..

26.5. Executing FSM_OPT pass (simple optimizations of FSMs).

26.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

26.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

26.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MCCU(N_CORES=4,CORE_EVENTS=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_counters(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_overflow(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_quota(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_raw(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RDC_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \crossbar_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pmu_ahb(haddr=-2146435072,hmask=4095)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_nft..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~96 debug messages>

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MCCU(N_CORES=4,CORE_EVENTS=2).
  Optimizing cells in module \PMU_counters(N_COUNTERS=24).
  Optimizing cells in module \PMU_overflow(N_COUNTERS=24).
  Optimizing cells in module \PMU_quota(N_COUNTERS=24).
  Optimizing cells in module \PMU_raw(N_COUNTERS=24).
  Optimizing cells in module \RDC_default.
  Optimizing cells in module \crossbar_default.
  Optimizing cells in module \pmu_ahb(haddr=-2146435072,hmask=4095).
  Optimizing cells in module \top_nft.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

27.9. Finished OPT passes. (There is nothing left to do.)

28. Executing MEMORY pass.

28.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

28.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

28.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..

28.4. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

28.5. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

28.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..

28.7. Executing MEMORY_COLLECT pass (generating $mem cells).

28.8. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MCCU(N_CORES=4,CORE_EVENTS=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_counters(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_overflow(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_quota(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PMU_raw(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RDC_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \crossbar_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pmu_ahb(haddr=-2146435072,hmask=4095)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_nft..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~96 debug messages>

29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MCCU(N_CORES=4,CORE_EVENTS=2).
  Optimizing cells in module \PMU_counters(N_COUNTERS=24).
  Optimizing cells in module \PMU_overflow(N_COUNTERS=24).
  Optimizing cells in module \PMU_quota(N_COUNTERS=24).
  Optimizing cells in module \PMU_raw(N_COUNTERS=24).
  Optimizing cells in module \RDC_default.
  Optimizing cells in module \crossbar_default.
  Optimizing cells in module \pmu_ahb(haddr=-2146435072,hmask=4095).
  Optimizing cells in module \top_nft.
Performed a total of 0 changes.

29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

29.6. Executing OPT_DFF pass (perform DFF optimizations).

29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..

29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

29.9. Finished OPT passes. (There is nothing left to do.)

30. Executing TECHMAP pass (map to technology primitives).

30.1. Executing Verilog-2005 frontend: /home/gcabo/Programs/tabby/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/gcabo/Programs/tabby/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

30.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using template $paramod$constmap:41f10b5641a353fdd4fd8cdba8a06a443a21b8ab$paramod$952e1e00541b4b705503c690b01bf65ca8dd5c79\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:00c735041a710ec0a51bfb01d9b8925611c2461f$paramod$fc5befd3d732ca0947cbf5985c44892a485fc824\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:a8dfa6f5247ab3b4f143deaaafd5c73c2e7a7f3c$paramod$c9f78a76619cefc8dec5f384e8061cf06c9a0cbd\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:5fa07ae87cabd38f8051ce26d6363849e7488bdb$paramod$2c070848037cd21a8a4ff5d6927b23d59c2d3d2e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:da70d30b4fb46f83d61449940ac6b173da59b5bc$paramod$253154783717c092dcf79528e85a0042b38b7875\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'0
  Constant input on bit 1 of port A: 1'1
  Constant input on bit 2 of port A: 1'1
  Constant input on bit 3 of port A: 1'1
  Constant input on bit 4 of port A: 1'1
  Constant input on bit 5 of port A: 1'0
  Constant input on bit 6 of port A: 1'0
  Constant input on bit 7 of port A: 1'0
  Constant input on bit 8 of port A: 1'1
  Constant input on bit 9 of port A: 1'0
  Constant input on bit 10 of port A: 1'1
  Constant input on bit 11 of port A: 1'1
  Constant input on bit 12 of port A: 1'1
  Constant input on bit 13 of port A: 1'0
  Constant input on bit 14 of port A: 1'0
  Constant input on bit 15 of port A: 1'0
  Constant input on bit 16 of port A: 1'1
  Constant input on bit 17 of port A: 1'1
  Constant input on bit 18 of port A: 1'1
  Constant input on bit 19 of port A: 1'1
  Constant input on bit 20 of port A: 1'0
  Constant input on bit 21 of port A: 1'1
  Constant input on bit 22 of port A: 1'0
  Constant input on bit 23 of port A: 1'1
  Constant input on bit 24 of port A: 1'0
  Constant input on bit 25 of port A: 1'1
  Constant input on bit 26 of port A: 1'1
  Constant input on bit 27 of port A: 1'1
  Constant input on bit 28 of port A: 1'1
  Constant input on bit 29 of port A: 1'1
  Constant input on bit 30 of port A: 1'0
  Constant input on bit 31 of port A: 1'1
  Constant input on bit 32 of port A: 1'1
  Constant input on bit 33 of port A: 1'0
  Constant input on bit 34 of port A: 1'0
  Constant input on bit 35 of port A: 1'0
  Constant input on bit 36 of port A: 1'1
  Constant input on bit 37 of port A: 1'0
  Constant input on bit 38 of port A: 1'1
  Constant input on bit 39 of port A: 1'0
  Constant input on bit 40 of port A: 1'1
  Constant input on bit 41 of port A: 1'0
  Constant input on bit 42 of port A: 1'1
  Constant input on bit 43 of port A: 1'0
  Constant input on bit 44 of port A: 1'1
  Constant input on bit 45 of port A: 1'1
  Constant input on bit 46 of port A: 1'0
  Constant input on bit 47 of port A: 1'1
  Constant input on bit 48 of port A: 1'1
  Constant input on bit 49 of port A: 1'1
  Constant input on bit 50 of port A: 1'1
  Constant input on bit 51 of port A: 1'1
  Constant input on bit 52 of port A: 1'0
  Constant input on bit 53 of port A: 1'1
  Constant input on bit 54 of port A: 1'0
  Constant input on bit 55 of port A: 1'1
  Constant input on bit 56 of port A: 1'0
  Constant input on bit 57 of port A: 1'1
  Constant input on bit 58 of port A: 1'1
  Constant input on bit 59 of port A: 1'1
  Constant input on bit 60 of port A: 1'1
  Constant input on bit 61 of port A: 1'1
  Constant input on bit 62 of port A: 1'0
  Constant input on bit 63 of port A: 1'1
  Bit 96 of port A and bit 64 of port A are connected.
  Bit 97 of port A and bit 65 of port A are connected.
  Bit 98 of port A and bit 66 of port A are connected.
  Bit 99 of port A and bit 67 of port A are connected.
  Bit 100 of port A and bit 68 of port A are connected.
  Bit 101 of port A and bit 69 of port A are connected.
  Bit 102 of port A and bit 70 of port A are connected.
  Bit 103 of port A and bit 71 of port A are connected.
  Bit 104 of port A and bit 72 of port A are connected.
  Bit 105 of port A and bit 73 of port A are connected.
  Bit 106 of port A and bit 74 of port A are connected.
  Bit 107 of port A and bit 75 of port A are connected.
  Bit 108 of port A and bit 76 of port A are connected.
  Bit 109 of port A and bit 77 of port A are connected.
  Bit 110 of port A and bit 78 of port A are connected.
  Bit 111 of port A and bit 79 of port A are connected.
  Bit 112 of port A and bit 80 of port A are connected.
  Bit 113 of port A and bit 81 of port A are connected.
  Bit 114 of port A and bit 82 of port A are connected.
  Bit 115 of port A and bit 83 of port A are connected.
  Bit 116 of port A and bit 84 of port A are connected.
  Bit 117 of port A and bit 85 of port A are connected.
  Bit 118 of port A and bit 86 of port A are connected.
  Bit 119 of port A and bit 87 of port A are connected.
  Bit 120 of port A and bit 88 of port A are connected.
  Bit 121 of port A and bit 89 of port A are connected.
  Bit 122 of port A and bit 90 of port A are connected.
  Bit 123 of port A and bit 91 of port A are connected.
  Bit 124 of port A and bit 92 of port A are connected.
  Bit 125 of port A and bit 93 of port A are connected.
  Bit 126 of port A and bit 94 of port A are connected.
  Bit 127 of port A and bit 95 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
Creating constmapped module `$paramod$constmap:21463a58daeeaf4ea16d8415d0a2532450db7605$paramod$c9f78a76619cefc8dec5f384e8061cf06c9a0cbd\_90_shift_ops_shr_shl_sshl_sshr'.

30.28. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:21463a58daeeaf4ea16d8415d0a2532450db7605$paramod$c9f78a76619cefc8dec5f384e8061cf06c9a0cbd\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~63628 debug messages>

30.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:21463a58daeeaf4ea16d8415d0a2532450db7605$paramod$c9f78a76619cefc8dec5f384e8061cf06c9a0cbd\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2492 debug messages>
Removed 160 unused cells and 24 unused wires.
Using template $paramod$constmap:21463a58daeeaf4ea16d8415d0a2532450db7605$paramod$c9f78a76619cefc8dec5f384e8061cf06c9a0cbd\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'0
  Constant input on bit 1 of port A: 1'1
  Constant input on bit 2 of port A: 1'1
  Constant input on bit 3 of port A: 1'1
  Constant input on bit 4 of port A: 1'1
  Constant input on bit 5 of port A: 1'0
  Constant input on bit 6 of port A: 1'0
  Constant input on bit 7 of port A: 1'0
  Constant input on bit 8 of port A: 1'1
  Constant input on bit 9 of port A: 1'0
  Constant input on bit 10 of port A: 1'1
  Constant input on bit 11 of port A: 1'1
  Constant input on bit 12 of port A: 1'1
  Constant input on bit 13 of port A: 1'0
  Constant input on bit 14 of port A: 1'0
  Constant input on bit 15 of port A: 1'0
  Constant input on bit 16 of port A: 1'0
  Constant input on bit 17 of port A: 1'1
  Constant input on bit 18 of port A: 1'1
  Constant input on bit 19 of port A: 1'1
  Constant input on bit 20 of port A: 1'1
  Constant input on bit 21 of port A: 1'1
  Constant input on bit 22 of port A: 1'1
  Constant input on bit 23 of port A: 1'1
  Constant input on bit 24 of port A: 1'0
  Constant input on bit 25 of port A: 1'1
  Constant input on bit 26 of port A: 1'0
  Constant input on bit 27 of port A: 1'1
  Constant input on bit 28 of port A: 1'0
  Constant input on bit 29 of port A: 1'0
  Constant input on bit 30 of port A: 1'1
  Constant input on bit 31 of port A: 1'1
  Constant input on bit 32 of port A: 1'1
  Constant input on bit 33 of port A: 1'0
  Constant input on bit 34 of port A: 1'0
  Constant input on bit 35 of port A: 1'0
  Constant input on bit 36 of port A: 1'1
  Constant input on bit 37 of port A: 1'0
  Constant input on bit 38 of port A: 1'1
  Constant input on bit 39 of port A: 1'0
  Constant input on bit 40 of port A: 1'1
  Constant input on bit 41 of port A: 1'0
  Constant input on bit 42 of port A: 1'1
  Constant input on bit 43 of port A: 1'0
  Constant input on bit 44 of port A: 1'1
  Constant input on bit 45 of port A: 1'1
  Constant input on bit 46 of port A: 1'0
  Constant input on bit 47 of port A: 1'1
  Constant input on bit 48 of port A: 1'0
  Constant input on bit 49 of port A: 1'1
  Constant input on bit 50 of port A: 1'1
  Constant input on bit 51 of port A: 1'1
  Constant input on bit 52 of port A: 1'1
  Constant input on bit 53 of port A: 1'1
  Constant input on bit 54 of port A: 1'1
  Constant input on bit 55 of port A: 1'1
  Constant input on bit 56 of port A: 1'0
  Constant input on bit 57 of port A: 1'1
  Constant input on bit 58 of port A: 1'0
  Constant input on bit 59 of port A: 1'1
  Constant input on bit 60 of port A: 1'0
  Constant input on bit 61 of port A: 1'0
  Constant input on bit 62 of port A: 1'1
  Constant input on bit 63 of port A: 1'1
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
Creating constmapped module `$paramod$constmap:cebc2261262054744613424430d261aa08e7259c$paramod$c9f78a76619cefc8dec5f384e8061cf06c9a0cbd\_90_shift_ops_shr_shl_sshl_sshr'.

30.30. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:cebc2261262054744613424430d261aa08e7259c$paramod$c9f78a76619cefc8dec5f384e8061cf06c9a0cbd\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

30.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:cebc2261262054744613424430d261aa08e7259c$paramod$c9f78a76619cefc8dec5f384e8061cf06c9a0cbd\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2460 debug messages>
Removed 160 unused cells and 24 unused wires.
Using template $paramod$constmap:cebc2261262054744613424430d261aa08e7259c$paramod$c9f78a76619cefc8dec5f384e8061cf06c9a0cbd\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:c2a6b634f2dfc0262601fcbcb10dc1bc16f5e877$paramod$b73ff74bc0c5fc1214d99ceeb32fa1e470941ca6\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'0
  Constant input on bit 1 of port A: 1'0
  Bit 3 of port A and bit 2 of port A are connected.
Creating constmapped module `$paramod$constmap:a2549b7a46f7816667d202a30d928a176cd7c95d$paramod$b73ff74bc0c5fc1214d99ceeb32fa1e470941ca6\_90_shift_ops_shr_shl_sshl_sshr'.

30.37. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:a2549b7a46f7816667d202a30d928a176cd7c95d$paramod$b73ff74bc0c5fc1214d99ceeb32fa1e470941ca6\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~132 debug messages>

30.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:a2549b7a46f7816667d202a30d928a176cd7c95d$paramod$b73ff74bc0c5fc1214d99ceeb32fa1e470941ca6\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~18 debug messages>
Removed 5 unused cells and 10 unused wires.
Using template $paramod$constmap:a2549b7a46f7816667d202a30d928a176cd7c95d$paramod$b73ff74bc0c5fc1214d99ceeb32fa1e470941ca6\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Running "alumacc" on wrapper $extern:wrap:$le:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=6:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$le:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=6:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$le:A_SIGNED=0:A_WIDTH=6:B_SIGNED=0:B_WIDTH=6:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
Using template $paramod$constmap:e2101c44e3f83a0dc2da774cd1fdd19ff2da5f4f$paramod$ed7d9a57a5ddab90b8eaf1cb85bb854938d2dab4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $eq.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$le:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$le:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$le:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod$constmap:214ece24acbe7b0c953a8679523827aec8fd75b8$paramod$e9310c9d5209bb0110b9dca4f77d7ef757379a5e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $ne.
Running "alumacc" on wrapper $extern:wrap:$le:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=5:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$le:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=5:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$le:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=5:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=5:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=5:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=5:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_not.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=5:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=5:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=5:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=5:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$constmap:855762987def4c994075d832f91a6f5255e44c76$paramod$595041de62cba85aea76c236846eb9682f1c3969\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=37:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=37:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=37:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=37:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=37:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=37:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=37:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=37:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=37:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$dc04b7d98e503a7bab16fce2df70e6e2c5ca34d6\_90_alu for cells of type $alu.
Using template $paramod$dd5ba471f7dcf35707f23b88cfd15b9582f97277\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100101 for cells of type $lcu.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $reduce_bool.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=9:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=9:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=9:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=9:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=9:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=9:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=64:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=64:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=64:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=9:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=9:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=9:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$403d74038787d91c0514bba9bf1032f6fa919203\_90_alu for cells of type $alu.
Using template $paramod$487c0d6ce38e02d4d40b33bf9d69d05e54d0cf31\_90_alu for cells of type $alu.
Using template $paramod$2126a3039e9678f6a4bd73d35a1f58ee2616afb2\_90_alu for cells of type $alu.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
No more expansions possible.
<suppressed ~40398 debug messages>

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
<suppressed ~2549 debug messages>
Optimizing module PMU_counters(N_COUNTERS=24).
<suppressed ~4392 debug messages>
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
<suppressed ~583 debug messages>
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
<suppressed ~648 debug messages>
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
<suppressed ~38 debug messages>
Optimizing module top_nft.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
<suppressed ~7383 debug messages>
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
<suppressed ~2376 debug messages>
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
<suppressed ~3 debug messages>
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
<suppressed ~159 debug messages>
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
<suppressed ~696 debug messages>
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
<suppressed ~132 debug messages>
Finding identical cells in module `\top_nft'.
Removed a total of 3583 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MCCU(N_CORES=4,CORE_EVENTS=2)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_counters(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_overflow(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_quota(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_raw(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RDC_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \crossbar_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pmu_ahb(haddr=-2146435072,hmask=4095)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top_nft..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MCCU(N_CORES=4,CORE_EVENTS=2).
  Optimizing cells in module \PMU_counters(N_COUNTERS=24).
  Optimizing cells in module \PMU_overflow(N_COUNTERS=24).
  Optimizing cells in module \PMU_quota(N_COUNTERS=24).
  Optimizing cells in module \PMU_raw(N_COUNTERS=24).
  Optimizing cells in module \RDC_default.
  Optimizing cells in module \crossbar_default.
  Optimizing cells in module \pmu_ahb(haddr=-2146435072,hmask=4095).
  Optimizing cells in module \top_nft.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86783 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [31], Q = \genblk1.master_addr [31]).
Adding SRST signal on $auto$simplemap.cc:527:simplemap_adff_sdff$9367 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \hwrite_i, Q = \genblk1.write, rval = 1'0).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86752 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [0], Q = \genblk1.master_addr [0]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86753 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [1], Q = \genblk1.master_addr [1]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86754 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [2], Q = \genblk1.master_addr [2]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86755 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [3], Q = \genblk1.master_addr [3]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86756 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [4], Q = \genblk1.master_addr [4]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86757 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [5], Q = \genblk1.master_addr [5]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86758 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [6], Q = \genblk1.master_addr [6]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86759 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [7], Q = \genblk1.master_addr [7]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86760 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [8], Q = \genblk1.master_addr [8]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86761 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [9], Q = \genblk1.master_addr [9]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86762 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [10], Q = \genblk1.master_addr [10]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86763 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [11], Q = \genblk1.master_addr [11]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86764 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [12], Q = \genblk1.master_addr [12]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86765 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [13], Q = \genblk1.master_addr [13]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86766 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [14], Q = \genblk1.master_addr [14]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86767 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [15], Q = \genblk1.master_addr [15]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86768 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [16], Q = \genblk1.master_addr [16]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86769 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [17], Q = \genblk1.master_addr [17]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86770 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [18], Q = \genblk1.master_addr [18]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86771 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [19], Q = \genblk1.master_addr [19]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86772 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [20], Q = \genblk1.master_addr [20]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86773 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [21], Q = \genblk1.master_addr [21]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86774 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [22], Q = \genblk1.master_addr [22]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86775 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [23], Q = \genblk1.master_addr [23]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86776 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [24], Q = \genblk1.master_addr [24]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86777 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [25], Q = \genblk1.master_addr [25]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86778 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [26], Q = \genblk1.master_addr [26]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86779 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [27], Q = \genblk1.master_addr [27]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86780 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [28], Q = \genblk1.master_addr [28]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86781 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [29], Q = \genblk1.master_addr [29]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$86782 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \haddr_i [30], Q = \genblk1.master_addr [30]).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..
Removed 1917 unused cells and 6726 unused wires.
<suppressed ~1927 debug messages>

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
<suppressed ~5 debug messages>
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
<suppressed ~30 debug messages>
Optimizing module top_nft.

31.9. Rerunning OPT passes. (Maybe there is more to do..)

31.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MCCU(N_CORES=4,CORE_EVENTS=2)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_counters(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_overflow(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_quota(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_raw(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RDC_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \crossbar_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pmu_ahb(haddr=-2146435072,hmask=4095)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top_nft..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MCCU(N_CORES=4,CORE_EVENTS=2).
  Optimizing cells in module \PMU_counters(N_COUNTERS=24).
  Optimizing cells in module \PMU_overflow(N_COUNTERS=24).
  Optimizing cells in module \PMU_quota(N_COUNTERS=24).
  Optimizing cells in module \PMU_raw(N_COUNTERS=24).
  Optimizing cells in module \RDC_default.
  Optimizing cells in module \crossbar_default.
  Optimizing cells in module \pmu_ahb(haddr=-2146435072,hmask=4095).
  Optimizing cells in module \top_nft.
Performed a total of 0 changes.

31.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

31.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$simplemap.cc:420:simplemap_dff$139649 ($_DFF_P_) from module MCCU(N_CORES=4,CORE_EVENTS=2).

31.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..
Removed 0 unused cells and 6 unused wires.
<suppressed ~2 debug messages>

31.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
<suppressed ~283 debug messages>
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

31.16. Rerunning OPT passes. (Maybe there is more to do..)

31.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MCCU(N_CORES=4,CORE_EVENTS=2)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_counters(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_overflow(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_quota(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_raw(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RDC_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \crossbar_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pmu_ahb(haddr=-2146435072,hmask=4095)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top_nft..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MCCU(N_CORES=4,CORE_EVENTS=2).
  Optimizing cells in module \PMU_counters(N_COUNTERS=24).
  Optimizing cells in module \PMU_overflow(N_COUNTERS=24).
  Optimizing cells in module \PMU_quota(N_COUNTERS=24).
  Optimizing cells in module \PMU_raw(N_COUNTERS=24).
  Optimizing cells in module \RDC_default.
  Optimizing cells in module \crossbar_default.
  Optimizing cells in module \pmu_ahb(haddr=-2146435072,hmask=4095).
  Optimizing cells in module \top_nft.
Performed a total of 0 changes.

31.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

31.20. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$simplemap.cc:527:simplemap_adff_sdff$9365 ($_SDFF_PN0_) from module pmu_ahb(haddr=-2146435072,hmask=4095) (D = \hsel_i, Q = \genblk3.state [0], rval = 1'0).

31.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..
Removed 1 unused cells and 139 unused wires.
<suppressed ~3 debug messages>

31.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

31.23. Rerunning OPT passes. (Maybe there is more to do..)

31.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MCCU(N_CORES=4,CORE_EVENTS=2)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_counters(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_overflow(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_quota(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PMU_raw(N_COUNTERS=24)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \RDC_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \crossbar_default..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pmu_ahb(haddr=-2146435072,hmask=4095)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top_nft..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MCCU(N_CORES=4,CORE_EVENTS=2).
  Optimizing cells in module \PMU_counters(N_COUNTERS=24).
  Optimizing cells in module \PMU_overflow(N_COUNTERS=24).
  Optimizing cells in module \PMU_quota(N_COUNTERS=24).
  Optimizing cells in module \PMU_raw(N_COUNTERS=24).
  Optimizing cells in module \RDC_default.
  Optimizing cells in module \crossbar_default.
  Optimizing cells in module \pmu_ahb(haddr=-2146435072,hmask=4095).
  Optimizing cells in module \top_nft.
Performed a total of 0 changes.

31.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Finding identical cells in module `\PMU_counters(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_overflow(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_quota(N_COUNTERS=24)'.
Finding identical cells in module `\PMU_raw(N_COUNTERS=24)'.
Finding identical cells in module `\RDC_default'.
Finding identical cells in module `\crossbar_default'.
Finding identical cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Finding identical cells in module `\top_nft'.
Removed a total of 0 cells.

31.27. Executing OPT_DFF pass (perform DFF optimizations).

31.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MCCU(N_CORES=4,CORE_EVENTS=2)..
Finding unused cells or wires in module \PMU_counters(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_overflow(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_quota(N_COUNTERS=24)..
Finding unused cells or wires in module \PMU_raw(N_COUNTERS=24)..
Finding unused cells or wires in module \RDC_default..
Finding unused cells or wires in module \crossbar_default..
Finding unused cells or wires in module \pmu_ahb(haddr=-2146435072,hmask=4095)..
Finding unused cells or wires in module \top_nft..

31.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module MCCU(N_CORES=4,CORE_EVENTS=2).
Optimizing module PMU_counters(N_COUNTERS=24).
Optimizing module PMU_overflow(N_COUNTERS=24).
Optimizing module PMU_quota(N_COUNTERS=24).
Optimizing module PMU_raw(N_COUNTERS=24).
Optimizing module RDC_default.
Optimizing module crossbar_default.
Optimizing module pmu_ahb(haddr=-2146435072,hmask=4095).
Optimizing module top_nft.

31.30. Finished OPT passes. (There is nothing left to do.)

32. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=7.98) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=7.98) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=10.32) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

32.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\MCCU(N_CORES=4,CORE_EVENTS=2)':
  mapped 168 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\PMU_counters(N_COUNTERS=24)':
  mapped 768 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\PMU_overflow(N_COUNTERS=24)':
  mapped 24 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\PMU_quota(N_COUNTERS=24)':
  mapped 67 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\PMU_raw(N_COUNTERS=24)':
  mapped 2 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\RDC_default':
  mapped 137 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\crossbar_default':
  mapped 24 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\pmu_ahb(haddr=-2146435072,hmask=4095)':
  mapped 1514 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\top_nft':

33. Executing ABC pass (technology mapping using ABC).

33.1. Extracting gate netlist of module `\MCCU(N_CORES=4,CORE_EVENTS=2)' to `<abc-temp-dir>/input.blif'..
Extracted 3102 gates and 3478 wires to a netlist network with 374 inputs and 172 outputs.

33.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/yosys/FT-PMU-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -o -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   2210 ( 15.2 %)   Cap =  4.9 ff (  7.5 %)   Area =     5347.67 ( 84.5 %)   Delay =  1118.69 ps  ( 26.9 %)               
ABC: Path  0 --     374 : 0    1 pi      A =   0.00  Df =   7.9   -4.9 ps  S =  17.4 ps  Cin =  0.0 ff  Cout =   4.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    2033 : 1    4 BUFX4   A =   2.82  Df =  56.8  -19.5 ps  S =  25.1 ps  Cin =  3.9 ff  Cout =  18.4 ff  Cmax = 999.3 ff  G =  446  
ABC: Path  2 --    2099 : 2    2 XNOR2X1 A =   4.69  Df = 122.8  -27.2 ps  S =  65.0 ps  Cin =  5.1 ff  Cout =   7.7 ff  Cmax = 228.3 ff  G =  145  
ABC: Path  3 --    2100 : 3    2 OAI21X1 A =   2.82  Df = 154.7  -26.9 ps  S =  51.3 ps  Cin =  2.5 ff  Cout =   4.6 ff  Cmax = 229.4 ff  G =  185  
ABC: Path  4 --    2102 : 3    1 AOI21X1 A =   2.82  Df = 188.5  -24.8 ps  S =  32.3 ps  Cin =  2.6 ff  Cout =   3.3 ff  Cmax =   0.0 ff  G =  126  
ABC: Path  5 --    2103 : 3    2 NOR3X1  A =   2.82  Df = 221.3  -19.0 ps  S =  69.8 ps  Cin =  3.1 ff  Cout =   6.1 ff  Cmax =  96.9 ff  G =  192  
ABC: Path  6 --    2104 : 3    1 NOR3X1  A =   2.82  Df = 254.0  -14.3 ps  S =  54.5 ps  Cin =  3.1 ff  Cout =   3.3 ff  Cmax =  96.9 ff  G =  104  
ABC: Path  7 --    2105 : 3    1 NOR3X1  A =   2.82  Df = 287.3  -15.9 ps  S =  56.1 ps  Cin =  3.1 ff  Cout =   3.3 ff  Cmax =  96.9 ff  G =  104  
ABC: Path  8 --    2106 : 3    2 NOR3X1  A =   2.82  Df = 325.8  -16.1 ps  S =  65.8 ps  Cin =  3.1 ff  Cout =   5.5 ff  Cmax =  96.9 ff  G =  176  
ABC: Path  9 --    2107 : 3    2 NOR3X1  A =   2.82  Df = 367.5  -15.4 ps  S =  69.8 ps  Cin =  3.1 ff  Cout =   6.1 ff  Cmax =  96.9 ff  G =  192  
ABC: Path 10 --    2108 : 3    2 NOR3X1  A =   2.82  Df = 409.6  -14.8 ps  S =  68.3 ps  Cin =  3.1 ff  Cout =   6.1 ff  Cmax =  96.9 ff  G =  192  
ABC: Path 11 --    2109 : 3    2 NOR3X1  A =   2.82  Df = 449.8  -15.9 ps  S =  62.4 ps  Cin =  3.1 ff  Cout =   5.0 ff  Cmax =  96.9 ff  G =  156  
ABC: Path 12 --    2110 : 3    3 NAND3X1 A =   2.35  Df = 502.0  -36.9 ps  S =  62.1 ps  Cin =  2.7 ff  Cout =   7.6 ff  Cmax =   0.0 ff  G =  283  
ABC: Path 13 --    2111 : 3    2 NOR3X1  A =   2.82  Df = 540.5  -38.3 ps  S =  62.2 ps  Cin =  3.1 ff  Cout =   5.0 ff  Cmax =  96.9 ff  G =  156  
ABC: Path 14 --    2112 : 3    3 NAND3X1 A =   2.35  Df = 592.8  -59.4 ps  S =  62.2 ps  Cin =  2.7 ff  Cout =   7.6 ff  Cmax =   0.0 ff  G =  283  
ABC: Path 15 --    2113 : 3    2 NOR3X1  A =   2.82  Df = 631.3  -60.8 ps  S =  62.2 ps  Cin =  3.1 ff  Cout =   5.0 ff  Cmax =  96.9 ff  G =  156  
ABC: Path 16 --    2114 : 3    3 NAND3X1 A =   2.35  Df = 683.6  -81.9 ps  S =  62.2 ps  Cin =  2.7 ff  Cout =   7.6 ff  Cmax =   0.0 ff  G =  283  
ABC: Path 17 --    2115 : 3    2 NOR3X1  A =   2.82  Df = 722.1  -83.4 ps  S =  62.2 ps  Cin =  3.1 ff  Cout =   5.0 ff  Cmax =  96.9 ff  G =  156  
ABC: Path 18 --    2116 : 3    3 NAND3X1 A =   2.35  Df = 774.4 -104.5 ps  S =  62.2 ps  Cin =  2.7 ff  Cout =   7.6 ff  Cmax =   0.0 ff  G =  283  
ABC: Path 19 --    2117 : 3    2 NOR3X1  A =   2.82  Df = 813.0 -105.9 ps  S =  62.2 ps  Cin =  3.1 ff  Cout =   5.0 ff  Cmax =  96.9 ff  G =  156  
ABC: Path 20 --    2118 : 3    3 NAND3X1 A =   2.35  Df = 865.3 -127.0 ps  S =  62.2 ps  Cin =  2.7 ff  Cout =   7.6 ff  Cmax =   0.0 ff  G =  283  
ABC: Path 21 --    2119 : 3    3 NOR3X1  A =   2.82  Df = 915.6 -119.3 ps  S =  92.7 ps  Cin =  3.1 ff  Cout =  11.3 ff  Cmax =  96.9 ff  G =  349  
ABC: Path 22 --    2139 : 3    4 NAND3X1 A =   2.35  Df = 994.4 -148.6 ps  S =  95.2 ps  Cin =  2.7 ff  Cout =  14.8 ff  Cmax =   0.0 ff  G =  543  
ABC: Path 23 --    2140 : 1   10 BUFX4   A =   2.82  Df =1031.2 -126.4 ps  S =  41.6 ps  Cin =  3.9 ff  Cout =  28.5 ff  Cmax = 999.3 ff  G =  698  
ABC: Path 24 --    2147 : 3    1 NAND3X1 A =   2.35  Df =1052.0  -61.4 ps  S =  38.2 ps  Cin =  2.7 ff  Cout =   2.5 ff  Cmax =   0.0 ff  G =   89  
ABC: Path 25 --    2155 : 3    1 NAND3X1 A =   2.35  Df =1088.9  -77.5 ps  S =  35.3 ps  Cin =  2.7 ff  Cout =   1.9 ff  Cmax =   0.0 ff  G =   69  
ABC: Path 26 --    2156 : 2    1 AND2X2  A =   2.82  Df =1118.7  -71.2 ps  S =   4.8 ps  Cin =  1.8 ff  Cout =   0.0 ff  Cmax = 505.1 ff  G =    0  
ABC: Start-point = pi373 (\Nft_suma.ccc_suma_int[3] [1]).  End-point = po97 ($auto$rtlil.cc:2316:MuxGate$148232).
ABC: + write_blif <abc-temp-dir>/output.blif 

33.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:      190
ABC RESULTS:            AND2X2 cells:       33
ABC RESULTS:           AOI21X1 cells:       34
ABC RESULTS:           AOI22X1 cells:      127
ABC RESULTS:             BUFX2 cells:       80
ABC RESULTS:             BUFX4 cells:       19
ABC RESULTS:             INVX1 cells:      237
ABC RESULTS:             INVX2 cells:        1
ABC RESULTS:           NAND2X1 cells:      517
ABC RESULTS:           NAND3X1 cells:      444
ABC RESULTS:            NOR2X1 cells:       51
ABC RESULTS:            NOR3X1 cells:       84
ABC RESULTS:           OAI21X1 cells:       85
ABC RESULTS:             OR2X1 cells:      132
ABC RESULTS:             OR2X2 cells:       13
ABC RESULTS:           XNOR2X1 cells:      100
ABC RESULTS:            XOR2X1 cells:       63
ABC RESULTS:        internal signals:     2932
ABC RESULTS:           input signals:      374
ABC RESULTS:          output signals:      172
Removing temp directory.

33.2. Extracting gate netlist of module `\PMU_counters(N_COUNTERS=24)' to `<abc-temp-dir>/input.blif'..
Extracted 4346 gates and 5911 wires to a netlist network with 1564 inputs and 1536 outputs.

33.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/yosys/FT-PMU-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -o -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   4777 ( 14.1 %)   Cap =  4.0 ff ( 10.8 %)   Area =    11837.62 ( 78.4 %)   Delay =  1085.25 ps  ( 11.3 %)               
ABC: Path  0 --    1541 : 0    3 pi      A =   0.00  Df =   9.3   -4.1 ps  S =  19.3 ps  Cin =  0.0 ff  Cout =   4.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    3121 : 1   10 BUFX2   A =   2.35  Df =  78.2   -9.4 ps  S =  68.1 ps  Cin =  1.5 ff  Cout =  28.3 ff  Cmax = 518.7 ff  G = 1784  
ABC: Path  2 --    3122 : 3    3 NAND3X1 A =   2.35  Df = 123.8  -11.4 ps  S =  58.1 ps  Cin =  2.7 ff  Cout =   6.9 ff  Cmax =   0.0 ff  G =  253  
ABC: Path  3 --    3123 : 3    3 NOR3X1  A =   2.82  Df = 165.8   -9.2 ps  S =  75.3 ps  Cin =  3.1 ff  Cout =   7.4 ff  Cmax =  96.9 ff  G =  231  
ABC: Path  4 --    3124 : 3    3 NAND3X1 A =   2.35  Df = 220.0  -29.3 ps  S =  62.4 ps  Cin =  2.7 ff  Cout =   7.7 ff  Cmax =   0.0 ff  G =  284  
ABC: Path  5 --    3125 : 3    3 NOR3X1  A =   2.82  Df = 270.4  -21.8 ps  S =  93.4 ps  Cin =  3.1 ff  Cout =  11.3 ff  Cmax =  96.9 ff  G =  349  
ABC: Path  6 --    3126 : 3    4 NAND3X1 A =   2.35  Df = 333.6  -43.4 ps  S =  72.2 ps  Cin =  2.7 ff  Cout =   9.8 ff  Cmax =   0.0 ff  G =  359  
ABC: Path  7 --    3127 : 3    3 NOR3X1  A =   2.82  Df = 385.1  -38.2 ps  S =  90.0 ps  Cin =  3.1 ff  Cout =  10.6 ff  Cmax =  96.9 ff  G =  327  
ABC: Path  8 --    3128 : 3    3 NAND3X1 A =   2.35  Df = 441.4  -57.0 ps  S =  62.4 ps  Cin =  2.7 ff  Cout =   7.7 ff  Cmax =   0.0 ff  G =  284  
ABC: Path  9 --    3129 : 3    3 NOR3X1  A =   2.82  Df = 491.8  -49.5 ps  S =  93.4 ps  Cin =  3.1 ff  Cout =  11.3 ff  Cmax =  96.9 ff  G =  349  
ABC: Path 10 --    3130 : 3    4 NAND3X1 A =   2.35  Df = 565.8  -76.7 ps  S =  88.6 ps  Cin =  2.7 ff  Cout =  13.3 ff  Cmax =   0.0 ff  G =  483  
ABC: Path 11 --    3131 : 3    3 NOR3X1  A =   2.82  Df = 615.9  -79.3 ps  S =  74.0 ps  Cin =  3.1 ff  Cout =   7.4 ff  Cmax =  96.9 ff  G =  231  
ABC: Path 12 --    3132 : 3    3 NAND3X1 A =   2.35  Df = 681.2 -105.5 ps  S =  78.9 ps  Cin =  2.7 ff  Cout =  11.2 ff  Cmax =   0.0 ff  G =  408  
ABC: Path 13 --    3133 : 3    3 NOR3X1  A =   2.82  Df = 734.2 -100.3 ps  S =  90.9 ps  Cin =  3.1 ff  Cout =  10.9 ff  Cmax =  96.9 ff  G =  330  
ABC: Path 14 --    3134 : 3    4 NAND3X1 A =   2.35  Df = 799.3 -123.4 ps  S =  76.0 ps  Cin =  2.7 ff  Cout =  10.6 ff  Cmax =   0.0 ff  G =  386  
ABC: Path 15 --    3135 : 3    4 NOR3X1  A =   2.82  Df = 858.0 -114.7 ps  S = 105.2 ps  Cin =  3.1 ff  Cout =  13.7 ff  Cmax =  96.9 ff  G =  425  
ABC: Path 16 --    3136 : 3    4 NAND3X1 A =   2.35  Df = 933.7 -140.9 ps  S =  88.6 ps  Cin =  2.7 ff  Cout =  13.3 ff  Cmax =   0.0 ff  G =  483  
ABC: Path 17 --    7873 : 3    1 NOR3X1  A =   2.82  Df = 979.6 -145.4 ps  S =  65.2 ps  Cin =  3.1 ff  Cout =   5.6 ff  Cmax =  96.9 ff  G =  170  
ABC: Path 18 --    7874 : 2    1 XNOR2X1 A =   4.69  Df =1029.6  -16.6 ps  S =  36.4 ps  Cin =  5.1 ff  Cout =   1.9 ff  Cmax = 228.3 ff  G =   36  
ABC: Path 19 --    7875 : 2    2 AND2X2  A =   2.82  Df =1068.1  -12.9 ps  S =  18.4 ps  Cin =  1.8 ff  Cout =   5.7 ff  Cmax = 505.1 ff  G =  308  
ABC: Path 20 --    7877 : 3    1 NOR3X1  A =   2.82  Df =1085.3  -14.5 ps  S =  37.9 ps  Cin =  3.1 ff  Cout =   0.0 ff  Cmax =  96.9 ff  G =    0  
ABC: Start-point = pi1540 (\en_i).  End-point = po1535 ($auto$rtlil.cc:2316:MuxGate$150160).
ABC: + write_blif <abc-temp-dir>/output.blif 

33.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:      793
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:       54
ABC RESULTS:             BUFX2 cells:      261
ABC RESULTS:             INVX1 cells:      412
ABC RESULTS:           NAND2X1 cells:     1246
ABC RESULTS:           NAND3X1 cells:      282
ABC RESULTS:            NOR2X1 cells:      143
ABC RESULTS:            NOR3X1 cells:      216
ABC RESULTS:           OAI21X1 cells:      628
ABC RESULTS:             OR2X1 cells:      239
ABC RESULTS:           XNOR2X1 cells:      315
ABC RESULTS:            XOR2X1 cells:      187
ABC RESULTS:        internal signals:     2811
ABC RESULTS:           input signals:     1564
ABC RESULTS:          output signals:     1536
Removing temp directory.

33.3. Extracting gate netlist of module `\PMU_overflow(N_COUNTERS=24)' to `<abc-temp-dir>/input.blif'..
Extracted 868 gates and 1688 wires to a netlist network with 819 inputs and 49 outputs.

33.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/yosys/FT-PMU-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -o -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    596 (  5.2 %)   Cap =  2.6 ff ( 12.2 %)   Area =     1385.84 ( 75.5 %)   Delay =   333.09 ps  ( 31.4 %)               
ABC: Path  0 --     365 : 0    1 pi      A =   0.00  Df =   3.7   -3.7 ps  S =  11.3 ps  Cin =  0.0 ff  Cout =   1.9 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    1135 : 2    1 AND2X2  A =   2.82  Df =  41.7   -8.3 ps  S =   9.7 ps  Cin =  1.8 ff  Cout =   3.0 ff  Cmax = 505.1 ff  G =  159  
ABC: Path  2 --    1136 : 3    1 NAND3X1 A =   2.35  Df =  71.5  -26.7 ps  S =  40.8 ps  Cin =  2.7 ff  Cout =   3.0 ff  Cmax =   0.0 ff  G =  113  
ABC: Path  3 --    1139 : 3    1 NOR3X1  A =   2.82  Df = 112.7  -18.8 ps  S =  49.7 ps  Cin =  3.1 ff  Cout =   2.1 ff  Cmax =  96.9 ff  G =   64  
ABC: Path  4 --    1145 : 2    1 NAND2X1 A =   1.88  Df = 147.1  -27.9 ps  S =  39.0 ps  Cin =  2.0 ff  Cout =   3.3 ff  Cmax =   0.0 ff  G =  163  
ABC: Path  5 --    1146 : 3    1 NOR3X1  A =   2.82  Df = 175.2  -28.1 ps  S =  52.1 ps  Cin =  3.1 ff  Cout =   2.7 ff  Cmax =  96.9 ff  G =   86  
ABC: Path  6 --    1147 : 3    3 AOI21X1 A =   2.82  Df = 226.9  -37.0 ps  S =  52.2 ps  Cin =  2.6 ff  Cout =   7.4 ff  Cmax =   0.0 ff  G =  283  
ABC: Path  7 --    1408 : 3    1 NAND3X1 A =   2.35  Df = 251.4  -15.3 ps  S =  40.3 ps  Cin =  2.7 ff  Cout =   3.0 ff  Cmax =   0.0 ff  G =  113  
ABC: Path  8 --    1434 : 3    1 NOR3X1  A =   2.82  Df = 302.3  -23.5 ps  S =  52.8 ps  Cin =  3.1 ff  Cout =   2.7 ff  Cmax =  96.9 ff  G =   86  
ABC: Path  9 --    1438 : 3    1 AOI21X1 A =   2.82  Df = 333.1  -21.2 ps  S =  16.5 ps  Cin =  2.6 ff  Cout =   0.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Start-point = pi364 (\counter_regs_i[11] [11]).  End-point = po23 (\intr_overflow_o).
ABC: + write_blif <abc-temp-dir>/output.blif 

33.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:      139
ABC RESULTS:            AND2X2 cells:        8
ABC RESULTS:           AOI21X1 cells:        9
ABC RESULTS:             BUFX2 cells:        4
ABC RESULTS:             INVX1 cells:       27
ABC RESULTS:           NAND2X1 cells:       77
ABC RESULTS:           NAND3X1 cells:      206
ABC RESULTS:            NOR2X1 cells:       32
ABC RESULTS:            NOR3X1 cells:       78
ABC RESULTS:           OAI21X1 cells:        9
ABC RESULTS:             OR2X1 cells:        7
ABC RESULTS:        internal signals:      820
ABC RESULTS:           input signals:      819
ABC RESULTS:          output signals:       49
Removing temp directory.

33.4. Extracting gate netlist of module `\PMU_quota(N_COUNTERS=24)' to `<abc-temp-dir>/input.blif'..
Extracted 2877 gates and 3772 wires to a netlist network with 893 inputs and 68 outputs.

33.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/yosys/FT-PMU-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -o -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   1629 ( 18.2 %)   Cap =  4.4 ff (  7.6 %)   Area =     4267.81 ( 84.5 %)   Delay =  2219.90 ps  (  9.8 %)               
ABC: Path  0 --      26 : 0    1 pi      A =   0.00  Df =   7.9   -4.9 ps  S =  17.4 ps  Cin =  0.0 ff  Cout =   4.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     965 : 1    7 BUFX4   A =   2.82  Df =  56.5  -20.6 ps  S =  22.9 ps  Cin =  3.9 ff  Cout =  16.6 ff  Cmax = 999.3 ff  G =  415  
ABC: Path  2 --    1007 : 2    5 OR2X2   A =   2.82  Df = 112.4  -16.8 ps  S =  29.5 ps  Cin =  2.3 ff  Cout =  12.0 ff  Cmax = 519.7 ff  G =  518  
ABC: Path  3 --    1008 : 2    4 OR2X2   A =   2.82  Df = 167.0  -15.8 ps  S =  22.6 ps  Cin =  2.3 ff  Cout =   8.7 ff  Cmax = 519.7 ff  G =  363  
ABC: Path  4 --    1038 : 2    5 OR2X2   A =   2.82  Df = 229.6   -8.9 ps  S =  47.4 ps  Cin =  2.3 ff  Cout =  18.4 ff  Cmax = 519.7 ff  G =  755  
ABC: Path  5 --    1039 : 2   10 XNOR2X1 A =   4.69  Df = 351.0  -54.0 ps  S = 143.4 ps  Cin =  5.1 ff  Cout =  24.1 ff  Cmax = 228.3 ff  G =  451  
ABC: Path  6 --    2158 : 3    1 OAI21X1 A =   2.82  Df = 400.2  -47.3 ps  S =  40.9 ps  Cin =  2.5 ff  Cout =   2.0 ff  Cmax = 229.4 ff  G =   80  
ABC: Path  7 --    2159 : 3    2 OAI21X1 A =   2.82  Df = 437.2  -31.4 ps  S =  68.7 ps  Cin =  2.5 ff  Cout =   8.0 ff  Cmax = 229.4 ff  G =  311  
ABC: Path  8 --    2160 : 2    3 XNOR2X1 A =   4.69  Df = 510.4  -25.7 ps  S =  65.8 ps  Cin =  5.1 ff  Cout =   7.9 ff  Cmax = 228.3 ff  G =  148  
ABC: Path  9 --    2163 : 3    1 AOI21X1 A =   2.82  Df = 548.7  -27.0 ps  S =  29.6 ps  Cin =  2.6 ff  Cout =   2.7 ff  Cmax =   0.0 ff  G =  103  
ABC: Path 10 --    2202 : 3    3 OAI21X1 A =   2.82  Df = 611.8  -60.4 ps  S =  70.4 ps  Cin =  2.5 ff  Cout =   8.3 ff  Cmax = 229.4 ff  G =  327  
ABC: Path 11 --    2204 : 3    3 OAI21X1 A =   2.82  Df = 648.5  -38.9 ps  S =  66.8 ps  Cin =  2.5 ff  Cout =   7.3 ff  Cmax = 229.4 ff  G =  287  
ABC: Path 12 --    2207 : 3    2 OAI21X1 A =   2.82  Df = 707.8  -61.6 ps  S =  67.6 ps  Cin =  2.5 ff  Cout =   7.8 ff  Cmax = 229.4 ff  G =  307  
ABC: Path 13 --    2209 : 3    3 OAI21X1 A =   2.82  Df = 743.9  -40.2 ps  S =  66.2 ps  Cin =  2.5 ff  Cout =   7.3 ff  Cmax = 229.4 ff  G =  287  
ABC: Path 14 --    2211 : 3    2 OAI21X1 A =   2.82  Df = 802.8  -62.6 ps  S =  67.6 ps  Cin =  2.5 ff  Cout =   7.8 ff  Cmax = 229.4 ff  G =  307  
ABC: Path 15 --    2213 : 3    3 OAI21X1 A =   2.82  Df = 838.9  -41.3 ps  S =  66.2 ps  Cin =  2.5 ff  Cout =   7.3 ff  Cmax = 229.4 ff  G =  287  
ABC: Path 16 --    2215 : 3    2 OAI21X1 A =   2.82  Df = 897.7  -63.6 ps  S =  67.5 ps  Cin =  2.5 ff  Cout =   7.8 ff  Cmax = 229.4 ff  G =  307  
ABC: Path 17 --    2217 : 3    3 OAI21X1 A =   2.82  Df = 933.8  -42.3 ps  S =  66.1 ps  Cin =  2.5 ff  Cout =   7.3 ff  Cmax = 229.4 ff  G =  287  
ABC: Path 18 --    2219 : 3    2 OAI21X1 A =   2.82  Df = 992.3  -64.2 ps  S =  67.0 ps  Cin =  2.5 ff  Cout =   7.7 ff  Cmax = 229.4 ff  G =  306  
ABC: Path 19 --    2222 : 3    3 AOI21X1 A =   2.82  Df =1038.2  -61.9 ps  S =  51.3 ps  Cin =  2.6 ff  Cout =   7.3 ff  Cmax =   0.0 ff  G =  274  
ABC: Path 20 --    2224 : 3    2 OAI21X1 A =   2.82  Df =1099.8  -90.2 ps  S =  67.6 ps  Cin =  2.5 ff  Cout =   7.8 ff  Cmax = 229.4 ff  G =  307  
ABC: Path 21 --    2226 : 3    3 OAI21X1 A =   2.82  Df =1135.9  -68.9 ps  S =  66.1 ps  Cin =  2.5 ff  Cout =   7.3 ff  Cmax = 229.4 ff  G =  287  
ABC: Path 22 --    2228 : 3    2 OAI21X1 A =   2.82  Df =1194.4  -90.8 ps  S =  67.0 ps  Cin =  2.5 ff  Cout =   7.7 ff  Cmax = 229.4 ff  G =  306  
ABC: Path 23 --    2231 : 3    3 AOI21X1 A =   2.82  Df =1240.3  -88.6 ps  S =  51.3 ps  Cin =  2.6 ff  Cout =   7.3 ff  Cmax =   0.0 ff  G =  274  
ABC: Path 24 --    2233 : 3    2 OAI21X1 A =   2.82  Df =1301.9 -116.8 ps  S =  67.6 ps  Cin =  2.5 ff  Cout =   7.8 ff  Cmax = 229.4 ff  G =  307  
ABC: Path 25 --    2235 : 3    3 OAI21X1 A =   2.82  Df =1338.0  -95.5 ps  S =  66.1 ps  Cin =  2.5 ff  Cout =   7.3 ff  Cmax = 229.4 ff  G =  287  
ABC: Path 26 --    2237 : 3    2 OAI21X1 A =   2.82  Df =1396.5 -117.4 ps  S =  67.1 ps  Cin =  2.5 ff  Cout =   7.7 ff  Cmax = 229.4 ff  G =  306  
ABC: Path 27 --    2241 : 3    3 AOI21X1 A =   2.82  Df =1442.4 -115.2 ps  S =  51.3 ps  Cin =  2.6 ff  Cout =   7.3 ff  Cmax =   0.0 ff  G =  274  
ABC: Path 28 --    2243 : 3    2 OAI21X1 A =   2.82  Df =1503.7 -143.1 ps  S =  67.0 ps  Cin =  2.5 ff  Cout =   7.7 ff  Cmax = 229.4 ff  G =  306  
ABC: Path 29 --    2246 : 3    3 AOI21X1 A =   2.82  Df =1549.6 -140.8 ps  S =  51.3 ps  Cin =  2.6 ff  Cout =   7.3 ff  Cmax =   0.0 ff  G =  274  
ABC: Path 30 --    2247 : 3    2 OAI21X1 A =   2.82  Df =1612.4 -169.7 ps  S =  69.4 ps  Cin =  2.5 ff  Cout =   8.2 ff  Cmax = 229.4 ff  G =  323  
ABC: Path 31 --    2249 : 3    3 OAI21X1 A =   2.82  Df =1648.9 -148.5 ps  S =  66.1 ps  Cin =  2.5 ff  Cout =   7.3 ff  Cmax = 229.4 ff  G =  287  
ABC: Path 32 --    2250 : 3    2 OAI21X1 A =   2.82  Df =1707.8 -170.9 ps  S =  67.5 ps  Cin =  2.5 ff  Cout =   7.8 ff  Cmax = 229.4 ff  G =  307  
ABC: Path 33 --    2252 : 3    3 OAI21X1 A =   2.82  Df =1743.8 -149.5 ps  S =  66.1 ps  Cin =  2.5 ff  Cout =   7.3 ff  Cmax = 229.4 ff  G =  287  
ABC: Path 34 --    2255 : 3    2 OAI21X1 A =   2.82  Df =1802.4 -171.5 ps  S =  67.0 ps  Cin =  2.5 ff  Cout =   7.7 ff  Cmax = 229.4 ff  G =  306  
ABC: Path 35 --    2258 : 3    3 AOI21X1 A =   2.82  Df =1848.2 -169.2 ps  S =  51.3 ps  Cin =  2.6 ff  Cout =   7.3 ff  Cmax =   0.0 ff  G =  274  
ABC: Path 36 --    2259 : 3    2 OAI21X1 A =   2.82  Df =1909.5 -197.1 ps  S =  67.0 ps  Cin =  2.5 ff  Cout =   7.7 ff  Cmax = 229.4 ff  G =  306  
ABC: Path 37 --    2262 : 3    3 AOI21X1 A =   2.82  Df =1957.3 -193.1 ps  S =  56.6 ps  Cin =  2.6 ff  Cout =   8.4 ff  Cmax =   0.0 ff  G =  317  
ABC: Path 38 --    2263 : 3    2 OAI21X1 A =   2.82  Df =2019.5 -220.9 ps  S =  66.5 ps  Cin =  2.5 ff  Cout =   7.8 ff  Cmax = 229.4 ff  G =  307  
ABC: Path 39 --    2265 : 3    3 OAI21X1 A =   2.82  Df =2056.3 -197.0 ps  S =  69.4 ps  Cin =  2.5 ff  Cout =   8.0 ff  Cmax = 229.4 ff  G =  312  
ABC: Path 40 --    2266 : 3    4 NOR3X1  A =   2.82  Df =2108.1 -197.6 ps  S =  88.3 ps  Cin =  3.1 ff  Cout =  10.2 ff  Cmax =  96.9 ff  G =  324  
ABC: Path 41 --    2588 : 3    1 NAND3X1 A =   2.35  Df =2141.1 -180.9 ps  S =  52.0 ps  Cin =  2.7 ff  Cout =   5.6 ff  Cmax =   0.0 ff  G =  198  
ABC: Path 42 --    2589 : 2    1 XNOR2X1 A =   4.69  Df =2190.1  -17.0 ps  S =  36.7 ps  Cin =  5.1 ff  Cout =   1.9 ff  Cmax = 228.3 ff  G =   36  
ABC: Path 43 --    2590 : 2    1 AND2X2  A =   2.82  Df =2219.9  -10.4 ps  S =   6.2 ps  Cin =  1.8 ff  Cout =   0.0 ff  Cmax = 505.1 ff  G =    0  
ABC: Start-point = pi25 (\state_int [1]).  End-point = po67 ($auto$rtlil.cc:2316:MuxGate$150342).
ABC: + write_blif <abc-temp-dir>/output.blif 

33.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:       81
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:       33
ABC RESULTS:           AOI22X1 cells:      401
ABC RESULTS:             BUFX2 cells:      133
ABC RESULTS:             BUFX4 cells:        5
ABC RESULTS:             INVX1 cells:      159
ABC RESULTS:            MUX2X1 cells:       41
ABC RESULTS:           NAND2X1 cells:      105
ABC RESULTS:           NAND3X1 cells:      239
ABC RESULTS:            NOR2X1 cells:       21
ABC RESULTS:            NOR3X1 cells:       49
ABC RESULTS:           OAI21X1 cells:      149
ABC RESULTS:             OR2X1 cells:      166
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:           XNOR2X1 cells:       33
ABC RESULTS:            XOR2X1 cells:        8
ABC RESULTS:        internal signals:     2811
ABC RESULTS:           input signals:      893
ABC RESULTS:          output signals:       68
Removing temp directory.

33.5. Extracting gate netlist of module `\PMU_raw(N_COUNTERS=24)' to `<abc-temp-dir>/input.blif'..
Extracted 102 gates and 183 wires to a netlist network with 79 inputs and 76 outputs.

33.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/yosys/FT-PMU-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -o -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    114 ( 33.3 %)   Cap =  2.5 ff ( 24.8 %)   Area =      258.58 ( 44.7 %)   Delay =   139.60 ps  ( 51.8 %)               
ABC: Path  0 --      55 : 0    1 pi      A =   0.00  Df =   3.1   -3.1 ps  S =  10.3 ps  Cin =  0.0 ff  Cout =   1.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     216 : 1    6 BUFX2   A =   2.35  Df =  56.0   -4.7 ps  S =  41.7 ps  Cin =  1.5 ff  Cout =  17.5 ff  Cmax = 518.7 ff  G = 1132  
ABC: Path  2 --     217 : 1   10 BUFX4   A =   2.82  Df = 104.2  -11.6 ps  S =  34.2 ps  Cin =  3.9 ff  Cout =  24.2 ff  Cmax = 999.3 ff  G =  607  
ABC: Path  3 --     220 : 3    1 OAI21X1 A =   2.82  Df = 139.6  -29.8 ps  S =  32.1 ps  Cin =  2.5 ff  Cout =   0.0 ff  Cmax = 229.4 ff  G =    0  
ABC: Start-point = pi54 (\regs_i[0] [31]).  End-point = po52 (\events_int [0]).
ABC: + write_blif <abc-temp-dir>/output.blif 

33.5.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:       52
ABC RESULTS:           AOI21X1 cells:       23
ABC RESULTS:             BUFX2 cells:        1
ABC RESULTS:             BUFX4 cells:       10
ABC RESULTS:             INVX1 cells:       26
ABC RESULTS:             INVX2 cells:        1
ABC RESULTS:           OAI21X1 cells:        1
ABC RESULTS:        internal signals:       28
ABC RESULTS:           input signals:       79
ABC RESULTS:          output signals:       76
Removing temp directory.

33.6. Extracting gate netlist of module `\RDC_default' to `<abc-temp-dir>/input.blif'..
Extracted 1154 gates and 1366 wires to a netlist network with 211 inputs and 138 outputs.

33.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/yosys/FT-PMU-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -o -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    928 ( 24.5 %)   Cap =  4.6 ff (  6.4 %)   Area =     2300.51 ( 86.5 %)   Delay =   429.39 ps  (  9.7 %)               
ABC: Path  0 --       8 : 0    5 pi      A =   0.00  Df =  32.1   -7.0 ps  S =  42.3 ps  Cin =  0.0 ff  Cout =  12.9 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     382 : 1    5 INVX2   A =   1.88  Df =  63.1   -0.9 ps  S =  34.2 ps  Cin =  2.7 ff  Cout =  13.1 ff  Cmax = 518.7 ff  G =  477  
ABC: Path  2 --     690 : 3    2 OAI21X1 A =   2.82  Df = 111.8  -24.8 ps  S =  49.5 ps  Cin =  2.5 ff  Cout =   3.9 ff  Cmax = 229.4 ff  G =  156  
ABC: Path  3 --     691 : 2    1 AND2X2  A =   2.82  Df = 146.9  -22.0 ps  S =  12.5 ps  Cin =  1.8 ff  Cout =   3.0 ff  Cmax = 505.1 ff  G =  166  
ABC: Path  4 --     698 : 3    1 NOR3X1  A =   2.82  Df = 181.4   -8.0 ps  S =  54.4 ps  Cin =  3.1 ff  Cout =   2.7 ff  Cmax =  96.9 ff  G =   85  
ABC: Path  5 --     705 : 3    1 OAI21X1 A =   2.82  Df = 228.7  -28.1 ps  S =  43.4 ps  Cin =  2.5 ff  Cout =   2.7 ff  Cmax = 229.4 ff  G =  110  
ABC: Path  6 --     709 : 3    1 AOI21X1 A =   2.82  Df = 261.7  -29.5 ps  S =  30.0 ps  Cin =  2.6 ff  Cout =   2.8 ff  Cmax =   0.0 ff  G =  106  
ABC: Path  7 --     712 : 3    7 OAI21X1 A =   2.82  Df = 359.4  -79.3 ps  S = 124.2 ps  Cin =  2.5 ff  Cout =  19.8 ff  Cmax = 229.4 ff  G =  775  
ABC: Path  8 --     717 : 3    1 NAND3X1 A =   2.35  Df = 399.7  -74.2 ps  S =  38.4 ps  Cin =  2.7 ff  Cout =   2.7 ff  Cmax =   0.0 ff  G =   99  
ABC: Path  9 --     735 : 3    1 AOI21X1 A =   2.82  Df = 429.4  -33.5 ps  S =  16.3 ps  Cin =  2.6 ff  Cout =   0.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Start-point = pi7 (\max_value[7] [0]).  End-point = po72 ($auto$rtlil.cc:2316:MuxGate$150584).
ABC: + write_blif <abc-temp-dir>/output.blif 

33.6.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:       74
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:      139
ABC RESULTS:           AOI22X1 cells:       74
ABC RESULTS:             BUFX2 cells:       59
ABC RESULTS:             BUFX4 cells:        8
ABC RESULTS:             INVX1 cells:      159
ABC RESULTS:             INVX2 cells:        1
ABC RESULTS:            MUX2X1 cells:       16
ABC RESULTS:           NAND2X1 cells:      100
ABC RESULTS:           NAND3X1 cells:       55
ABC RESULTS:            NOR2X1 cells:       43
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI21X1 cells:      105
ABC RESULTS:             OR2X1 cells:       42
ABC RESULTS:           XNOR2X1 cells:       40
ABC RESULTS:            XOR2X1 cells:        5
ABC RESULTS:        internal signals:     1017
ABC RESULTS:           input signals:      211
ABC RESULTS:          output signals:      138
Removing temp directory.

33.7. Extracting gate netlist of module `\crossbar_default' to `<abc-temp-dir>/input.blif'..
Extracted 768 gates and 922 wires to a netlist network with 153 inputs and 24 outputs.

33.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/yosys/FT-PMU-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -o -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   1358 ( 19.2 %)   Cap =  5.8 ff (  2.4 %)   Area =     3791.47 ( 92.6 %)   Delay =   377.05 ps  ( 19.9 %)               
ABC: Path  0 --      91 : 0    1 pi      A =   0.00  Df =   3.1   -3.1 ps  S =  10.3 ps  Cin =  0.0 ff  Cout =   1.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     959 : 1    5 BUFX2   A =   2.35  Df =  52.5   -3.9 ps  S =  36.3 ps  Cin =  1.5 ff  Cout =  15.3 ff  Cmax = 518.7 ff  G =  975  
ABC: Path  2 --     960 : 1   10 BUFX4   A =   2.82  Df = 106.2   -5.8 ps  S =  50.6 ps  Cin =  3.9 ff  Cout =  38.4 ff  Cmax = 999.3 ff  G =  951  
ABC: Path  3 --     961 : 1   10 BUFX4   A =   2.82  Df = 160.6  -20.3 ps  S =  40.4 ps  Cin =  3.9 ff  Cout =  29.1 ff  Cmax = 999.3 ff  G =  728  
ABC: Path  4 --     962 : 3    1 MUX2X1  A =   3.75  Df = 203.8   -9.4 ps  S =  43.3 ps  Cin =  3.1 ff  Cout =   2.8 ff  Cmax =  75.1 ff  G =   86  
ABC: Path  5 --     965 : 3    1 MUX2X1  A =   3.75  Df = 241.1   -8.1 ps  S =  41.6 ps  Cin =  3.1 ff  Cout =   2.3 ff  Cmax =  75.1 ff  G =   74  
ABC: Path  6 --     966 : 2    1 OR2X2   A =   2.82  Df = 289.1   -8.9 ps  S =  12.1 ps  Cin =  2.3 ff  Cout =   2.7 ff  Cmax = 519.7 ff  G =  115  
ABC: Path  7 --     984 : 3    1 AOI21X1 A =   2.82  Df = 317.0  -11.0 ps  S =  29.5 ps  Cin =  2.6 ff  Cout =   2.8 ff  Cmax =   0.0 ff  G =  105  
ABC: Path  8 --    1009 : 3    1 MUX2X1  A =   3.75  Df = 344.0   -1.7 ps  S =  39.4 ps  Cin =  3.1 ff  Cout =   1.9 ff  Cmax =  75.1 ff  G =   59  
ABC: Path  9 --    1010 : 2    1 AND2X2  A =   2.82  Df = 377.0   -3.1 ps  S =   5.1 ps  Cin =  1.8 ff  Cout =   0.0 ff  Cmax = 505.1 ff  G =    0  
ABC: Start-point = pi90 (\cfg_i[14] [2]).  End-point = po13 ($auto$rtlil.cc:2316:MuxGate$150896).
ABC: + write_blif <abc-temp-dir>/output.blif 

33.7.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:        1
ABC RESULTS:            AND2X2 cells:       13
ABC RESULTS:           AOI21X1 cells:      249
ABC RESULTS:           AOI22X1 cells:        5
ABC RESULTS:             BUFX2 cells:      135
ABC RESULTS:             BUFX4 cells:       58
ABC RESULTS:             INVX1 cells:       68
ABC RESULTS:            MUX2X1 cells:      258
ABC RESULTS:           NAND2X1 cells:       39
ABC RESULTS:           NAND3X1 cells:       34
ABC RESULTS:            NOR2X1 cells:       97
ABC RESULTS:            NOR3X1 cells:       68
ABC RESULTS:           OAI21X1 cells:      282
ABC RESULTS:             OR2X1 cells:       41
ABC RESULTS:             OR2X2 cells:       10
ABC RESULTS:        internal signals:      745
ABC RESULTS:           input signals:      153
ABC RESULTS:          output signals:       24
Removing temp directory.

33.8. Extracting gate netlist of module `\pmu_ahb(haddr=-2146435072,hmask=4095)' to `<abc-temp-dir>/input.blif'..
Extracted 9243 gates and 12306 wires to a netlist network with 3061 inputs and 3051 outputs.

33.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/gcabo/PDKs/FreePDK45/osu_soc/lib/files/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + read_constr -v /home/gcabo/BSC/bsc_pmu/synth/yosys/FT-PMU-comp/synth.constr 
ABC: Setting driving cell to be "INVX1".
ABC: Setting output load to be 0.015000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -o -D 10 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 10 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 10 
ABC: + dnsize -D 10 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   9920 ( 17.8 %)   Cap =  4.4 ff (  2.3 %)   Area =    25126.32 ( 94.8 %)   Delay =   789.82 ps  (  6.6 %)               
ABC: Path  0 --      11 : 0    1 pi      A =   0.00  Df =   7.9   -4.9 ps  S =  17.4 ps  Cin =  0.0 ff  Cout =   4.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    6120 : 1    6 BUFX4   A =   2.82  Df =  56.4  -20.6 ps  S =  22.9 ps  Cin =  3.9 ff  Cout =  16.5 ff  Cmax = 999.3 ff  G =  411  
ABC: Path  2 --    6365 : 1   10 BUFX4   A =   2.82  Df = 105.9  -30.7 ps  S =  35.8 ps  Cin =  3.9 ff  Cout =  26.4 ff  Cmax = 999.3 ff  G =  654  
ABC: Path  3 --    6379 : 1    6 INVX4   A =   3.29  Df = 126.5  -24.4 ps  S =  19.2 ps  Cin =  5.1 ff  Cout =  15.9 ff  Cmax =1041.0 ff  G =  299  
ABC: Path  4 --    6875 : 3    1 NAND3X1 A =   2.35  Df = 142.6   -0.2 ps  S =  45.1 ps  Cin =  2.7 ff  Cout =   4.0 ff  Cmax =   0.0 ff  G =  147  
ABC: Path  5 --    6876 : 1   10 BUFX4   A =   2.82  Df = 196.4  -14.4 ps  S =  39.0 ps  Cin =  3.9 ff  Cout =  28.2 ff  Cmax = 999.3 ff  G =  702  
ABC: Path  6 --    8362 : 3    7 NOR3X1  A =   2.82  Df = 310.1  -51.6 ps  S = 158.3 ps  Cin =  3.1 ff  Cout =  24.5 ff  Cmax =  96.9 ff  G =  765  
ABC: Path  7 --    8363 : 1   10 BUFX4   A =   2.82  Df = 350.6  -17.6 ps  S =  55.3 ps  Cin =  3.9 ff  Cout =  38.5 ff  Cmax = 999.3 ff  G =  951  
ABC: Path  8 --    8364 : 1   10 BUFX4   A =   2.82  Df = 397.7   -0.3 ps  S =  52.0 ps  Cin =  3.9 ff  Cout =  39.0 ff  Cmax = 999.3 ff  G =  964  
ABC: Path  9 --    8365 : 1   10 BUFX4   A =   2.82  Df = 453.8  -16.8 ps  S =  39.7 ps  Cin =  3.9 ff  Cout =  28.5 ff  Cmax = 999.3 ff  G =  709  
ABC: Path 10 --    8366 : 1   10 BUFX4   A =   2.82  Df = 505.8  -31.7 ps  S =  34.6 ps  Cin =  3.9 ff  Cout =  24.6 ff  Cmax = 999.3 ff  G =  610  
ABC: Path 11 --   12427 : 3    2 MUX2X1  A =   3.75  Df = 551.8  -10.8 ps  S =  48.8 ps  Cin =  3.1 ff  Cout =   3.8 ff  Cmax =  75.1 ff  G =  122  
ABC: Path 12 --   14741 : 2    1 OR2X2   A =   2.82  Df = 600.8  -12.2 ps  S =  16.9 ps  Cin =  2.3 ff  Cout =   2.8 ff  Cmax = 519.7 ff  G =  118  
ABC: Path 13 --   14751 : 4    1 AOI22X1 A =   3.29  Df = 634.4   -0.1 ps  S =  44.9 ps  Cin =  2.8 ff  Cout =   1.9 ff  Cmax =   0.0 ff  G =   66  
ABC: Path 14 --   14752 : 2    1 AND2X2  A =   2.82  Df = 678.3   -9.5 ps  S =  14.7 ps  Cin =  1.8 ff  Cout =   2.7 ff  Cmax = 505.1 ff  G =  146  
ABC: Path 15 --   14761 : 3    1 OAI21X1 A =   2.82  Df = 720.9  -35.5 ps  S =  45.5 ps  Cin =  2.5 ff  Cout =   2.7 ff  Cmax = 229.4 ff  G =  108  
ABC: Path 16 --   14802 : 3    1 AOI21X1 A =   2.82  Df = 745.1   -5.0 ps  S =  27.7 ps  Cin =  2.6 ff  Cout =   2.4 ff  Cmax =   0.0 ff  G =   90  
ABC: Path 17 --   14803 : 2    1 OR2X1   A =   2.35  Df = 789.8   -6.3 ps  S =   6.4 ps  Cin =  2.4 ff  Cout =   0.0 ff  Cmax =  70.0 ff  G =    0  
ABC: Start-point = pi10 (\genblk1.master_addr [3]).  End-point = po3030 (\dread_slave [11]).
ABC: + write_blif <abc-temp-dir>/output.blif 

33.8.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:      200
ABC RESULTS:            AND2X2 cells:        7
ABC RESULTS:           AOI21X1 cells:      945
ABC RESULTS:           AOI22X1 cells:      419
ABC RESULTS:             BUFX2 cells:     1049
ABC RESULTS:             BUFX4 cells:      100
ABC RESULTS:             INVX1 cells:      611
ABC RESULTS:             INVX2 cells:        3
ABC RESULTS:             INVX4 cells:        1
ABC RESULTS:            MUX2X1 cells:     1470
ABC RESULTS:           NAND2X1 cells:     2341
ABC RESULTS:           NAND3X1 cells:      362
ABC RESULTS:            NOR2X1 cells:      996
ABC RESULTS:            NOR3X1 cells:      180
ABC RESULTS:           OAI21X1 cells:     1022
ABC RESULTS:             OR2X1 cells:      212
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:        internal signals:     6194
ABC RESULTS:           input signals:     3061
ABC RESULTS:          output signals:     3051
Removing temp directory.

33.9. Extracting gate netlist of module `\top_nft' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

34. Printing statistics.

=== MCCU(N_CORES=4,CORE_EVENTS=2) ===

   Number of wires:               3985
   Number of wire bits:           7719
   Number of public wires:          45
   Number of public wire bits:     740
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2378
     AND2X1                        190
     AND2X2                         33
     AOI21X1                        34
     AOI22X1                       127
     BUFX2                          80
     BUFX4                          19
     DFFPOSX1                      168
     INVX1                         237
     INVX2                           1
     NAND2X1                       517
     NAND3X1                       444
     NOR2X1                         51
     NOR3X1                         84
     OAI21X1                        85
     OR2X1                         132
     OR2X2                          13
     XNOR2X1                       100
     XOR2X1                         63

   Chip area for module '\MCCU(N_CORES=4,CORE_EVENTS=2)': 6687.994300

=== PMU_counters(N_COUNTERS=24) ===

   Number of wires:               7838
   Number of wire bits:          13069
   Number of public wires:         103
   Number of public wire bits:    3102
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5545
     AND2X1                        793
     AND2X2                          1
     AOI21X1                        54
     BUFX2                         261
     DFFPOSX1                      768
     INVX1                         412
     NAND2X1                      1246
     NAND3X1                       282
     NOR2X1                        143
     NOR3X1                        216
     OAI21X1                       628
     OR2X1                         239
     XNOR2X1                       315
     XOR2X1                        187

   Chip area for module '\PMU_counters(N_COUNTERS=24)': 17964.804000

=== PMU_overflow(N_COUNTERS=24) ===

   Number of wires:               1579
   Number of wire bits:           3103
   Number of public wires:          35
   Number of public wire bits:     894
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                620
     AND2X1                        139
     AND2X2                          8
     AOI21X1                         9
     BUFX2                           4
     DFFPOSX1                       24
     INVX1                          27
     NAND2X1                        77
     NAND3X1                       206
     NOR2X1                         32
     NOR3X1                         78
     OAI21X1                         9
     OR2X1                           7

   Chip area for module '\PMU_overflow(N_COUNTERS=24)': 1577.317300

=== PMU_quota(N_COUNTERS=24) ===

   Number of wires:               2919
   Number of wire bits:           9746
   Number of public wires:          59
   Number of public wire bits:    1664
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1696
     AND2X1                         81
     AND2X2                          3
     AOI21X1                        33
     AOI22X1                       401
     BUFX2                         133
     BUFX4                           5
     DFFPOSX1                       67
     INVX1                         159
     MUX2X1                         41
     NAND2X1                       105
     NAND3X1                       239
     NOR2X1                         21
     NOR3X1                         49
     OAI21X1                       149
     OR2X1                         166
     OR2X2                           3
     XNOR2X1                        33
     XOR2X1                          8

   Chip area for module '\PMU_quota(N_COUNTERS=24)': 4802.346900

=== PMU_raw(N_COUNTERS=24) ===

   Number of wires:                421
   Number of wire bits:           5449
   Number of public wires:         221
   Number of public wire bits:    5153
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                122
     AND2X1                         52
     AOI21X1                        23
     BUFX2                           1
     BUFX4                          10
     DFFPOSX1                        2
     INVX1                          26
     INVX2                           1
     MCCU(N_CORES=4,CORE_EVENTS=2)      1
     OAI21X1                         1
     PMU_counters(N_COUNTERS=24)      1
     PMU_overflow(N_COUNTERS=24)      1
     PMU_quota(N_COUNTERS=24)        1
     RDC_default                     1
     crossbar_default                1

   Area for cell type \crossbar_default is unknown!
   Area for cell type \PMU_counters(N_COUNTERS=24) is unknown!
   Area for cell type \PMU_overflow(N_COUNTERS=24) is unknown!
   Area for cell type \PMU_quota(N_COUNTERS=24) is unknown!
   Area for cell type \MCCU(N_CORES=4,CORE_EVENTS=2) is unknown!
   Area for cell type \RDC_default is unknown!

   Chip area for module '\PMU_raw(N_COUNTERS=24)': 274.540500

=== RDC_default ===

   Number of wires:               1847
   Number of wire bits:           2697
   Number of public wires:          51
   Number of public wire bits:     325
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1065
     AND2X1                         74
     AND2X2                          1
     AOI21X1                       139
     AOI22X1                        74
     BUFX2                          59
     BUFX4                           8
     DFFPOSX1                      137
     INVX1                         159
     INVX2                           1
     MUX2X1                         16
     NAND2X1                       100
     NAND3X1                        55
     NOR2X1                         43
     NOR3X1                          7
     OAI21X1                       105
     OR2X1                          42
     XNOR2X1                        40
     XOR2X1                          5

   Chip area for module '\RDC_default': 3393.508300

=== crossbar_default ===

   Number of wires:               1684
   Number of wire bits:           5577
   Number of public wires:          29
   Number of public wire bits:     202
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1382
     AND2X1                          1
     AND2X2                         13
     AOI21X1                       249
     AOI22X1                         5
     BUFX2                         135
     BUFX4                          58
     DFFPOSX1                       24
     INVX1                          68
     MUX2X1                        258
     NAND2X1                        39
     NAND3X1                        34
     NOR2X1                         97
     NOR3X1                         68
     OAI21X1                       282
     OR2X1                          41
     OR2X2                          10

   Chip area for module '\crossbar_default': 3982.949100

=== pmu_ahb(haddr=-2146435072,hmask=4095) ===

   Number of wires:              14852
   Number of wire bits:          34797
   Number of public wires:         227
   Number of public wire bits:    6323
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              11435
     AND2X1                        200
     AND2X2                          7
     AOI21X1                       945
     AOI22X1                       419
     BUFX2                        1049
     BUFX4                         100
     DFFPOSX1                     1514
     INVX1                         611
     INVX2                           3
     INVX4                           1
     MUX2X1                       1470
     NAND2X1                      2341
     NAND3X1                       362
     NOR2X1                        996
     NOR3X1                        180
     OAI21X1                      1022
     OR2X1                         212
     OR2X2                           2
     PMU_raw(N_COUNTERS=24)          1

   Area for cell type \PMU_raw(N_COUNTERS=24) is unknown!

   Chip area for module '\pmu_ahb(haddr=-2146435072,hmask=4095)': 37205.165400

=== top_nft ===

   Number of wires:                 22
   Number of wire bits:            158
   Number of public wires:          22
   Number of public wire bits:     158
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     pmu_ahb(haddr=-2146435072,hmask=4095)      1

   Area for cell type \pmu_ahb(haddr=-2146435072,hmask=4095) is unknown!

=== design hierarchy ===

   top_nft                           1
     pmu_ahb(haddr=-2146435072,hmask=4095)      1
       PMU_raw(N_COUNTERS=24)        1
         MCCU(N_CORES=4,CORE_EVENTS=2)      1
         PMU_counters(N_COUNTERS=24)      1
         PMU_overflow(N_COUNTERS=24)      1
         PMU_quota(N_COUNTERS=24)      1
         RDC_default                 1
         crossbar_default            1

   Number of wires:              35147
   Number of wire bits:          82315
   Number of public wires:         792
   Number of public wire bits:   18561
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              24236
     AND2X1                       1530
     AND2X2                         66
     AOI21X1                      1486
     AOI22X1                      1026
     BUFX2                        1722
     BUFX4                         200
     DFFPOSX1                     2704
     INVX1                        1699
     INVX2                           6
     INVX4                           1
     MUX2X1                       1785
     NAND2X1                      4425
     NAND3X1                      1622
     NOR2X1                       1383
     NOR3X1                        682
     OAI21X1                      2281
     OR2X1                         839
     OR2X2                          28
     XNOR2X1                       488
     XOR2X1                        263

   Chip area for top module '\top_nft': 75888.625800

Removed 0 unused cells and 15348 unused wires.

35. Executing Verilog backend.
Dumping module `\MCCU(N_CORES=4,CORE_EVENTS=2)'.
Dumping module `\PMU_counters(N_COUNTERS=24)'.
Dumping module `\PMU_overflow(N_COUNTERS=24)'.
Dumping module `\PMU_quota(N_COUNTERS=24)'.
Dumping module `\PMU_raw(N_COUNTERS=24)'.
Dumping module `\RDC_default'.
Dumping module `\crossbar_default'.
Dumping module `\pmu_ahb(haddr=-2146435072,hmask=4095)'.
Dumping module `\top_nft'.

End of script. Logfile hash: 4ecfc3c7f3, CPU: user 11.42s system 0.07s, MEM: 461.36 MB peak
Yosys 0.9+4081 (git sha1 862e84eb, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 20% 1x abc (2 sec), 14% 36x opt_expr (1 sec), ...
