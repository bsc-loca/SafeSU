//-----------------------------------------------------
// ProjectName: Drac
// Function   : Monitor events generated by SoC
// Description: The PMU is an AXI peripheral that allow to monitor several
//              events, you can set how many you need with N_COUNTERS.
//              The amount of Counters and configuration registers affect the
//              IO space adress in the processor, so be sure that the driver
//              library writtes in the correspoding address.
//              axi_awaddr[1:0] and axi_araddr[1:0] are unused because data 
//              is accessed must be 32bit aligned.
// Coder      : G.Cabo

`default_nettype none

`timescale 1 ns / 1 ps

	module AXI_PMU_interface_v1_0_S00_AXI #
	(
		// Width of S_AXI data bus
		parameter integer C_S_AXI_DATA_WIDTH	= 32,
		// Width of S_AXI address bus
		parameter integer C_S_AXI_ADDR_WIDTH	= 7,
		// Amount of counters
		parameter integer N_COUNTERS	= 9,
		// Configuration registers
		parameter integer N_CONF_REGS	= 1,
		// Overflow
		parameter integer OVERFLOW	= 1, //Yes/No
		// Quota
		parameter integer QUOTA	= 1 //Yes/No
	)
	(
        //interruption rises when one of the counters overflows
        output int_overflow_o,
        //interruption rises when the total of cuota consumed is exceeded
        output int_quota_o,
        //external signals from Soc events
        input wire [N_COUNTERS-1:0] events_i, // bus of signals for counters 
		// Global Clock Signal
		input wire  S_AXI_ACLK_i,
		// Global Reset Signal. This Signal is Active LOW
		input wire  S_AXI_ARESETN_i,
		// Write address (issued by master, acceped by Slave)
		input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_AWADDR_i,
		// Write address valid. This signal indicates that the master signaling
    		// valid write address and control information.
		input wire  S_AXI_AWVALID_i,
		// Write address ready. This signal indicates that the slave is ready
    		// to accept an address and associated control signals.
		output wire  S_AXI_AWREADY_o,
		// Write data (issued by master, acceped by Slave) 
		input wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_WDATA_i,
		// Write strobes. This signal indicates which byte lanes hold
    		// valid data. There is one write strobe bit for each eight
    		// bits of the write data bus.    
		input wire [(C_S_AXI_DATA_WIDTH/8)-1 : 0] S_AXI_WSTRB_i,
		// Write valid. This signal indicates that valid write
    		// data and strobes are available.
		input wire  S_AXI_WVALID_i,
		// Write ready. This signal indicates that the slave
    		// can accept the write data.
		output wire  S_AXI_WREADY_o,
		// Write response. This signal indicates the status
    		// of the write transaction.
		output wire [1 : 0] S_AXI_BRESP_o,
		// Write response valid. This signal indicates that the channel
    		// is signaling a valid write response.
		output wire  S_AXI_BVALID_o,
		// Response ready. This signal indicates that the master
    		// can accept a write response.
		input wire  S_AXI_BREADY_i,
		// Read address (issued by master, acceped by Slave)
		input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_ARADDR_i,
		// Read address valid. This signal indicates that the channel
    		// is signaling valid read address and control information.
		input wire  S_AXI_ARVALID_i,
		// Read address ready. This signal indicates that the slave is
    		// ready to accept an address and associated control signals.
		output wire  S_AXI_ARREADY_o,
		// Read data (issued by slave)
		output wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_RDATA_o,
		// Read response. This signal indicates the status of the
    		// read transfer.
		output wire [1 : 0] S_AXI_RRESP_o,
		// Read valid. This signal indicates that the channel is
    		// signaling the required read data.
		output wire  S_AXI_RVALID_o,
		// Read ready. This signal indicates that the master can
    		// accept the read data and response information.
		input wire  S_AXI_RREADY_i
	);

	// AXI4LITE signals
	/* verilator lint_off UNUSED */
    //Lower bits are not used due to 32 bit address aligment
    reg [C_S_AXI_ADDR_WIDTH-1 : 0] 	axi_awaddr;
	/* verilator lint_on UNUSED */
	reg  	axi_awready;
	reg  	axi_wready;
	reg [1 : 0] 	axi_bresp;
	reg  	axi_bvalid;
	/* verilator lint_off UNUSED */
    //Lower bits are not used due to 32 bit address aligment
	reg [C_S_AXI_ADDR_WIDTH-1 : 0] 	axi_araddr;
	/* verilator lint_on UNUSED */
	reg  	axi_arready;
	reg [C_S_AXI_DATA_WIDTH-1 : 0] 	axi_rdata;
	reg [1 : 0] 	axi_rresp;
	reg  	axi_rvalid;

	// Example-specific design signals
	// local parameter for addressing 32 bit / 64 bit C_S_AXI_DATA_WIDTH
	// ADDR_LSB is used for addressing 32/64 bit registers/memories
	// ADDR_LSB = 2 for 32 bits (n downto 2)
	// ADDR_LSB = 3 for 64 bits (n downto 3)
	localparam integer ADDR_LSB = (C_S_AXI_DATA_WIDTH/32) + 1;
	localparam integer OPT_MEM_ADDR_BITS = 4;
    
    //One bit per counter and round up to N registers of DATA_WIDTH
    localparam integer N_OVERFLOW_REGS= (OVERFLOW == 0)? 0
                       :(N_COUNTERS % C_S_AXI_DATA_WIDTH) >0
                       ? (N_COUNTERS / C_S_AXI_DATA_WIDTH)+1 
                       : (N_COUNTERS / C_S_AXI_DATA_WIDTH);

    localparam integer N_QUOTA_MASK= (QUOTA==1)
                       ?(N_COUNTERS/C_S_AXI_DATA_WIDTH)+1:0;

    localparam integer N_QUOTA_LIMIT= (QUOTA==1)?1:0;//quota_limit

    localparam integer TOTAL_REGS = N_CONF_REGS+N_OVERFLOW_REGS+N_COUNTERS 
                                    +N_QUOTA_MASK+N_QUOTA_LIMIT;

    localparam integer RW_REGS = N_CONF_REGS+N_OVERFLOW_REGS+N_QUOTA_MASK
                                 +N_QUOTA_LIMIT;
    //if more than 32 counters extra registers are needed for overflow
    localparam integer BASE_QUOTA = N_COUNTERS+N_CONF_REGS+N_OVERFLOW_REGS;
    //This may change, there are advantages to be able to set the initial value
    localparam integer R_ONLY_REGS = N_COUNTERS;
	//----------------------------------------------
	//-- Signals for user logic register space example
	//------------------------------------------------
	//-- Number of Slave Registers 
    reg [C_S_AXI_DATA_WIDTH-1:0] slv_reg [0:N_CONF_REGS+N_COUNTERS-1] /*verilator public*/;
	
    wire	 slv_reg_rden;
	wire	 slv_reg_wren;
	reg [C_S_AXI_DATA_WIDTH-1:0]	 reg_data_out;
	integer	 byte_index;
	reg	 aw_en;

	// I/O Connections assignments

	assign S_AXI_AWREADY_o	= axi_awready;
	assign S_AXI_WREADY_o	= axi_wready;
	assign S_AXI_BRESP_o	= axi_bresp;
	assign S_AXI_BVALID_o	= axi_bvalid;
	assign S_AXI_ARREADY_o	= axi_arready;
	assign S_AXI_RDATA_o	= axi_rdata;
	assign S_AXI_RRESP_o	= axi_rresp;
	assign S_AXI_RVALID_o	= axi_rvalid;
	// Implement axi_awready generation
	// axi_awready is asserted for one S_AXI_ACLK_i clock cycle when both
	// S_AXI_AWVALID_i and S_AXI_WVALID_i are asserted. axi_awready is
	// de-asserted when reset is low.

	always @( posedge S_AXI_ACLK_i )
	begin
	  if ( S_AXI_ARESETN_i == 1'b0 )
	    begin
	      axi_awready <= 1'b0;
	      aw_en <= 1'b1;
	    end 
	  else
	    begin    
	      if (~axi_awready && S_AXI_AWVALID_i && S_AXI_WVALID_i && aw_en)
	        begin
	          // slave is ready to accept write address when 
	          // there is a valid write address and write data
	          // on the write address and data bus. This design 
	          // expects no outstanding transactions. 
	          axi_awready <= 1'b1;
	          aw_en <= 1'b0;
	        end
	        else if (S_AXI_BREADY_i && axi_bvalid)
	            begin
	              aw_en <= 1'b1;
	              axi_awready <= 1'b0;
	            end
	      else           
	        begin
	          axi_awready <= 1'b0;
	        end
	    end 
	end       

	// Implement axi_awaddr latching
	// This process is used to latch the address when both 
	// S_AXI_AWVALID_i and S_AXI_WVALID_i are valid. 

	always @( posedge S_AXI_ACLK_i )
	begin
	  if ( S_AXI_ARESETN_i == 1'b0 )
	    begin
	      axi_awaddr <= {C_S_AXI_ADDR_WIDTH{1'b0}};
	    end 
	  else
	    begin    
	      if (~axi_awready && S_AXI_AWVALID_i && S_AXI_WVALID_i && aw_en)
	        begin
	          // Write Address latching 
	          axi_awaddr <= S_AXI_AWADDR_i;
	        end
	    end 
	end       

	// Implement axi_wready generation
	// axi_wready is asserted for one S_AXI_ACLK_i clock cycle when both
	// S_AXI_AWVALID_i and S_AXI_WVALID_i are asserted. axi_wready is 
	// de-asserted when reset is low. 

	always @( posedge S_AXI_ACLK_i )
	begin
	  if ( S_AXI_ARESETN_i == 1'b0 )
	    begin
	      axi_wready <= 1'b0;
	    end 
	  else
	    begin    
	      if (~axi_wready && S_AXI_WVALID_i && S_AXI_AWVALID_i && aw_en )
	        begin
	          // slave is ready to accept write data when 
	          // there is a valid write address and write data
	          // on the write address and data bus. This design 
	          // expects no outstanding transactions. 
	          axi_wready <= 1'b1;
	        end
	      else
	        begin
	          axi_wready <= 1'b0;
	        end
	    end 
	end       

	// Implement memory mapped register select and write logic generation
	// The write data is accepted and written to memory mapped registers when
	// axi_awready, S_AXI_WVALID_i, axi_wready and S_AXI_WVALID_i are asserted. Write strobes are used to
	// select byte enables of slave registers while writing.
	// These registers are cleared when reset (active low) is applied.
	// Slave register write enable is asserted when valid address and data are available
	// and the slave is ready to accept the write address and write data.
	assign slv_reg_wren = axi_wready && S_AXI_WVALID_i && axi_awready && S_AXI_AWVALID_i;

	always @( posedge S_AXI_ACLK_i )
	begin
	  if ( S_AXI_ARESETN_i == 1'b0 )
	    begin : reset_all
        integer i;
        for (i=N_COUNTERS; i<N_CONF_REGS+N_COUNTERS; i=i+1) slv_reg[i] <={C_S_AXI_DATA_WIDTH{1'b0}};
	    end 
	  else begin
	    if (slv_reg_wren)
	      begin : strobes
            integer i;
            integer write_address;
            /* verilator lint_off WIDTH */
            // Width mismatch between integer 32B and MSB due to aligment of 
            // addresses
            write_address = axi_awaddr[ADDR_LSB+OPT_MEM_ADDR_BITS:ADDR_LSB];
            /* verilator lint_on WIDTH */
            
            for (i=N_COUNTERS; i<N_CONF_REGS+N_COUNTERS; i=i+1)begin
                if (write_address == i) begin
                    for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
                      if ( S_AXI_WSTRB_i[byte_index] == 1 ) begin
                        // Respective byte enables are asserted as per write strobes 
                        slv_reg[i][(byte_index*8) +: 8] <= S_AXI_WDATA_i[(byte_index*8) +: 8];
                      end  
                end
            end
            if(write_address > N_CONF_REGS+N_COUNTERS) begin
                            for (i=N_COUNTERS; i<N_CONF_REGS+N_COUNTERS; i=i+1) slv_reg[i] <=slv_reg[i];
            end
	      end
	  end
	end    

	// Implement write response logic generation
	// The write response and response valid signals are asserted by the slave 
	// when axi_wready, S_AXI_WVALID_i, axi_wready and S_AXI_WVALID_i are asserted.  
	// This marks the acceptance of address and indicates the status of 
	// write transaction.

	always @( posedge S_AXI_ACLK_i )
	begin
	  if ( S_AXI_ARESETN_i == 1'b0 )
	    begin
	      axi_bvalid  <= 0;
	      axi_bresp   <= 2'b0;
	    end 
	  else
	    begin    
	      if (axi_awready && S_AXI_AWVALID_i && ~axi_bvalid && axi_wready && S_AXI_WVALID_i)
	        begin
	          // indicates a valid write response is available
	          axi_bvalid <= 1'b1;
	          axi_bresp  <= 2'b0; // 'OKAY' response 
	        end                   // work error responses in future
	      else
	        begin
	          if (S_AXI_BREADY_i && axi_bvalid) 
	            //check if bready is asserted while bvalid is high) 
	            //(there is a possibility that bready is always asserted high)   
	            begin
	              axi_bvalid <= 1'b0; 
	            end  
	        end
	    end
	end   

	// Implement axi_arready generation
	// axi_arready is asserted for one S_AXI_ACLK_i clock cycle when
	// S_AXI_ARVALID_i is asserted. axi_awready is 
	// de-asserted when reset (active low) is asserted. 
	// The read address is also latched when S_AXI_ARVALID_i is 
	// asserted. axi_araddr is reset to zero on reset assertion.

	always @( posedge S_AXI_ACLK_i )
	begin
	  if ( S_AXI_ARESETN_i == 1'b0 )
	    begin
	      axi_arready <= 1'b0;
	      axi_araddr  <= {C_S_AXI_ADDR_WIDTH{1'b0}};
	    end 
	  else
	    begin    
	      if (~axi_arready && S_AXI_ARVALID_i)
	        begin
	          // indicates that the slave has acceped the valid read address
	          axi_arready <= 1'b1;
	          // Read address latching
	          axi_araddr  <= S_AXI_ARADDR_i;
	        end
	      else
	        begin
	          axi_arready <= 1'b0;
	        end
	    end 
	end       

	// Implement axi_arvalid generation
	// axi_rvalid is asserted for one S_AXI_ACLK_i clock cycle when both 
	// S_AXI_ARVALID_i and axi_arready are asserted. The slave registers 
	// data are available on the axi_rdata bus at this instance. The 
	// assertion of axi_rvalid marks the validity of read data on the 
	// bus and axi_rresp indicates the status of read transaction.axi_rvalid 
	// is deasserted on reset (active low). axi_rresp and axi_rdata are 
	// cleared to zero on reset (active low).  
	always @( posedge S_AXI_ACLK_i )
	begin
	  if ( S_AXI_ARESETN_i == 1'b0 )
	    begin
	      axi_rvalid <= 0;
	      axi_rresp  <= 0;
	    end 
	  else
	    begin    
	      if (axi_arready && S_AXI_ARVALID_i && ~axi_rvalid)
	        begin
	          // Valid read data is available at the read data bus
	          axi_rvalid <= 1'b1;
	          axi_rresp  <= 2'b0; // 'OKAY' response
	        end   
	      else if (axi_rvalid && S_AXI_RREADY_i)
	        begin
	          // Read data is accepted by the master
	          axi_rvalid <= 1'b0;
	        end                
	    end
	end    

	// Implement memory mapped register select and read logic generation
	// Slave register read enable is asserted when valid address is available
	// and the slave is ready to accept the read address.
	assign slv_reg_rden = axi_arready & S_AXI_ARVALID_i & ~axi_rvalid;
	always @(*)
	begin :decode_read
	      // Address decoding for reading registers
	      integer i;
          // Address read as integer to avoid width mismatch
          integer read_address;
          /* verilator lint_off WIDTH */
          read_address = axi_araddr[ADDR_LSB+OPT_MEM_ADDR_BITS:ADDR_LSB];
          /* verilator lint_on WIDTH */
          reg_data_out = 0;
          for (i=0; i<N_CONF_REGS+N_COUNTERS; i=i+1) begin
            if (read_address==i) begin
                reg_data_out =slv_reg[i];
            end
          end
         if (read_address>N_CONF_REGS+N_COUNTERS) begin
            reg_data_out = 0;
          end
	end

	// Output register or memory read data
	always @( posedge S_AXI_ACLK_i )
	begin
	  if ( S_AXI_ARESETN_i == 1'b0 )
	    begin
	      axi_rdata  <= 0;
	    end 
	  else
	    begin    
	      // When there is a valid read address (S_AXI_ARVALID_i) with 
	      // acceptance of read address by the slave (axi_arready), 
	      // output the read dada 
	      if (slv_reg_rden)
	        begin
	          axi_rdata <= reg_data_out;     // register read data
	        end   
	    end
	end    

	// Wire reset and enable signals
    wire en_PMU, reset_PMU;
    //the first bit of the first config register is the enable
    assign en_PMU = slv_reg[N_COUNTERS][0];
    //the second bit of the first config register is the reset
    assign reset_PMU = slv_reg[N_COUNTERS][1];
   
//-------------Adders with reset
    //Inside the generate loop it creates as many counters as the parameter
    //N_COUNTERS. For each of them one slv_reg is assigned. When a soft reset
    //(reset_PMU high) or hard reset (S_AXI_ARESETN_i) slv_registers are set
    //to 0. If non of this cases happen if the PMU is enabled (en_PMU high) and
    //the event of the given counter (events_i[k]) is high the counter
    // increases by one.
    genvar k;
    generate
    for (k=0; k<N_COUNTERS; k=k+1) begin : generated_counter
        always @(posedge S_AXI_ACLK_i) begin
            if(!S_AXI_ARESETN_i)
                slv_reg[k] <={C_S_AXI_DATA_WIDTH{1'b0}};
            else begin
                if(reset_PMU) slv_reg[k] <={C_S_AXI_DATA_WIDTH{1'b0}};
                else if(events_i[k] & en_PMU) slv_reg[k] <= slv_reg[k]+1;
            end
        end
    end
    endgenerate
//-------------Overflow
//TODO:
//this one may not be parametric if more than 32 counters are used
    //Here we generate the overflow signal for each one of the counters. 
    //One bit per counter is given in the overflow register. a accounts for
    //multiple 32 bit registers if needed.(slv_reg[a+OVERFLOW_REGS_OFFSET])
    //Overflow registers are placed after Counter and Configuration registers.
    //At hard or soft reset values are set to 0. 
    genvar j;
    generate
        if(OVERFLOW==1) begin : generated_overflow
        //iterate over the registers, each one has one overflow bit
            for (j=0; j<N_COUNTERS; j=j+1) begin : overflow_bit
                //When more than 32 counters, extra registers are needed
                localparam integer OVERFLOW_REGS_OFFSET= N_COUNTERS+N_CONF_REGS;
                localparam integer a = j/C_S_AXI_DATA_WIDTH;
                assign int_overflow_o =(reset_PMU || (S_AXI_ARESETN_i == 1'b0))?
                                     1'b0: | slv_reg[a+OVERFLOW_REGS_OFFSET];
                always @(posedge S_AXI_ACLK_i) begin
                    if (reset_PMU || (S_AXI_ARESETN_i == 1'b0)) 
                        slv_reg[a+OVERFLOW_REGS_OFFSET]
                        <={C_S_AXI_DATA_WIDTH{1'b0}};
                    else if (slv_reg[j]=={C_S_AXI_DATA_WIDTH{1'b1}})
                             slv_reg[a+OVERFLOW_REGS_OFFSET][j]<=1'b1;
                end
            end
        //decide the overflow register if there are more than 32 counters
        //if overflow set bit to 1
        end else assign int_overflow_o = 0'b0;
    endgenerate

    
//-------------Quota
    //TODO
    //instead os sum the 16 registers at the same time you could use a 
    //statemachine that sums two at a time. you will increase latency but less
    //hardware is required
    //64 bits for overflow are not needed

    //A quota consumption interruption is generated when a the total of 
    //measured events exceeds the value set in slv_reg[BASE_QUOTA+1].
    //To account for a given event a 1 must be set to the correspondent bit in
    //slv_reg[BASE_QUOTA][x]. (This register is refered as Quota mask)
    //When the mask is 0 the value is not accounted for the quota.
    //If the QUOTA local parameter is set to 0, int_quota_o will never trigger.
    genvar x;
    generate
        if(QUOTA==1) begin : generated_quota
            //avoid width mismatch when dealing with 32b register addition
            localparam padding0 = 64-C_S_AXI_DATA_WIDTH;
            assign int_quota_o =(suma>{{padding0{1'b0}},slv_reg[BASE_QUOTA+1]})? 1'b1:1'b0;
            //from each register we take a wire 
            wire [C_S_AXI_DATA_WIDTH-1:0] values_count [0:N_COUNTERS-1];
            reg [63:0]suma;//64bits to avoid overflows
            wire[63:0]tmp;
            for (x=0; x<N_COUNTERS; x=x+1) begin : check_mask
                //when reset is eneabled the values are 0. If not reset
                // check the mask and pass the value of the counter if enabled
                assign values_count[x]=
                        (reset_PMU || (S_AXI_ARESETN_i == 1'b0))
                        ?{C_S_AXI_DATA_WIDTH{1'b0}}:
                        {C_S_AXI_DATA_WIDTH{slv_reg[BASE_QUOTA][x]}}
                        &slv_reg[x];
            end
            //Add quotas of all signals. The ones that are not enabled are 0
            always @(*) begin
                    tmp =0;
                    for(x=0; x<N_COUNTERS; x=x+1)  begin: sum_quotas
                       tmp={{padding0{1'b0}},values_count[x]}+tmp;
                    end
                    suma=tmp;
            end
        end else assign int_quota_o =1'b0;
    endgenerate
`default_nettype wire //allow compatibility with legacy code and xilinx ip
endmodule

